[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"/articles/egor_allbus.html","id":"the-allbus-2010-ego-centered-network-data","dir":"Articles","previous_headings":"","what":"The Allbus 2010: ego-centered network data","title":"Working with Allbus 2010 ego-centered network data using egor","text":"Allbus 2010 splits respondents two groups. groups presented different name generators. Allbus name generator - generated alters called “Freunde” (friends German) data (max. 3 persons, “spent time private, living household”) GSS name generator - alters called “Kontakte” (contacts German) dataset (max. 5 persons, “discussed important matters”) information please consult Allbus documentation. ## Load packages data addition egor, vignette uses haven package, import SPSS file Allbus 2010 purrr package, provides enhanced functional programming functions. purrr functions used vignette map*() functions, similar functionality base R’s lapply(). using haven import original Allbus data, look like . purpose vignette loading simulated data instead. Allbus variable names quite technical ranging V1 V981. Fortunately haven data import preserves SPSS variable labels, describe variable detail. going convert labels format, allows us use variable names. code extracts variable labels eliminates non-characters labels substitutes spaces underscores. variable labels ego-centered network module need special treatment, egor can give useful names alter variables. deleting first part labels, shared variables split. Now can use cleaned variable labels names data.","code":"library(egor) library(purrr) library(haven) raw_data <- read_sav(\"ZA4610_A10.SAV\") data(\"allbus_2010_simulated\") raw_data <- allbus_2010_simulated var_labels <- map_chr(raw_data, ~attr(., \"label\"))  var_labels <- gsub(\"[,\\\\.:;><?+()-]\", \" \", var_labels) var_labels <- gsub(\"\\\\s+\", \"_\", trimws(var_labels)) var_labels <- gsub(\"FREUND_IN_._\", \"\", var_labels) var_labels <- gsub(\"^KONTAKT_._\", \"\", var_labels) names(raw_data) <- make.unique(var_labels, sep = \"\")"},{"path":"/articles/egor_allbus.html","id":"convert-the-data-to-egor-objects","dir":"Articles","previous_headings":"","what":"Convert the data to egor objects","title":"Working with Allbus 2010 ego-centered network data using egor","text":"going create two separate ego objects split. Starting “Freunde” split. First filter respondents split 1. Now use onefile_to_egor() function convert data egor object. function needs arguments order able locate alter data alter-alter tie data dataset. onefile_to_egor() function prints messages conversion, supposed help us identify problems case something something goes wrong. also see NOTE, tells us need filter invalid alter-alter ties. case ties weight 2, since Allbus codes existing ties 2 . “KENNEN SICH NICHT” means “don’t know ” german. can filter alter-alter ties using activate() filter() functions. Next repeat steps split 2. need filter weight value 3 alter-alter ties adjust arguments according position data dataset maximum amount alters respondents allowed nominate.","code":"split_freunde <-    raw_data %>%    filter(FRAGEBOGENSPLIT_F020 == 1) e_freunde <- onefile_to_egor(                 egos = split_freunde,                 ID.vars = list(ego = \"IDENTIFIKATIONSNUMMER_DES_BEFRAGTEN\"),                 netsize = split_freunde$ANZ_GENANNTER_NETZWERKPERS_SPLIT_1,                 attr.start.col = \"GESCHLECHT\",                 attr.end.col = \"SPANNUNGEN_KONFLIKTE2\",                 aa.first.var = \"KENNEN_SICH_A_B\",                 max.alters = 3) #> Sorting data by egoID: #> Done. #> Transforming alters data to long format: #> Done. #> Transforming wide dyad data to edgelist: #> Done. #> Note: Make sure to filter out alter-alter ties with invalid weight values. #> Filtering out empty alter entries using provided network size values: #> Done. attr(raw_data$KENNEN_SICH_A_B, \"labels\") #>   TRIFFT NICHT ZU   KENNEN SICH GUT KENNEN SICH NICHT      KEINE ANGABE  #>                 0                 1                 2                 9 e_freunde <-    e_freunde %>%    activate(aatie) %>%    filter(weight != 2) %>%    activate(ego) split_kontakte <-    raw_data %>%    filter(FRAGEBOGENSPLIT_F020 == 2)   e_kontakte <- onefile_to_egor(   egos = split_kontakte,   ID.vars = list(ego = \"IDENTIFIKATIONSNUMMER_DES_BEFRAGTEN\"),   netsize = split_kontakte$ANZ_GENANNTER_NETZWERKPERS_SPLIT_2,   attr.start.col = \"GESCHLECHT3\",   attr.end.col = \"SPANNUNGEN_KONFLIKTE7\",   aa.first.var = \"KENNEN_SICH_KONTAKT_A_B\",   max.alters = 5) #> Sorting data by egoID: #> Done. #> Transforming alters data to long format: #> Done. #> Transforming wide dyad data to edgelist: #> Done. #> Note: Make sure to filter out alter-alter ties with invalid weight values. #> Filtering out empty alter entries using provided network size values: #> Done.  e_kontakte <-    e_kontakte %>%    activate(aatie) %>%    filter(weight != 3) %>%    activate(ego)"},{"path":"/articles/egor_allbus.html","id":"visualize-and-analyze","dir":"Articles","previous_headings":"","what":"Visualize and analyze","title":"Working with Allbus 2010 ego-centered network data using egor","text":"Now can visualize analyze Allbus data. demonstrations follow. overview available options, please see main vignette egor “Using egor analyse ego-centered network data”.","code":"plot(e_freunde, ego_no = 4, x_dim = 2, y_dim = 1) plot(e_kontakte, ego_no = 4, x_dim = 2, y_dim = 1) e_freunde <-    e_freunde%>%    activate(alter) %>%    mutate(WO_GEBOREN = droplevels(as_factor(WO_GEBOREN)),          KONTAKTE =  droplevels(as_factor(KONTAKTE)))  plot_egograms(e_freunde,                ego_no = 4,                x_dim = 1,                y_dim = 1, venn_var = \"KONTAKTE\",               pie_var = \"WO_GEBOREN\") e_kontakte <-    e_kontakte %>%    activate(alter) %>%    mutate(WO_GEBOREN = droplevels(as_factor(WO_GEBOREN)),          KONTAKTE =  droplevels(as_factor(KONTAKTE)))  plot_egograms(e_kontakte,                ego_no = 4,                x_dim = 1,                y_dim = 1,                venn_var = \"KONTAKTE\" ,               pie_var = \"WO_GEBOREN\")"},{"path":"/articles/qualtrics.html","id":"structure-of-an-ego-centered-network-survey","dir":"Articles","previous_headings":"","what":"Structure of an ego-centered network survey","title":"Qualtrics & egor: Setting up and analysing an ego-centered network survey with Qualtrics and egor","text":"Ego Attribute Section. Includes questions ego (e.g., demographics, personality inventory, etc.). Name Generator: Alter List. Participants list alters section. Alter names piped alter attribute alter-alter tie sections. participants can free choice many alters want name can forced fill specific number alter names. Name Interpretator: Alter Attributes. section survey used collect alter attributes (e.g. gender, age, etc.) characteristics ego-alter relationship (e.g. contact frequency, emotional closeness, etc.). Alter-Alter Tie. section, participants generate information alter-alter ties. Alter-alter ties ego-centered networks usually collected un-directed relations single question relationship alter x alter y.","code":""},{"path":"/articles/qualtrics.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best practices","title":"Qualtrics & egor: Setting up and analysing an ego-centered network survey with Qualtrics and egor","text":"conducting ego-centered network surveys practices proven decrease drop-rates increase quality collected data. items listed apply kind survey, others specific ego-centered network data collection. Informed Consent Quality assurance: Ask participants commit providing best answers. Thoroughly describe data collection process. Make sure participant aware ahead time long process take need provide identifying information (unless plan match alters across egos study another reason collect identifying). identifying alter information necessary, make sure explain front information. template slots 5 alters, can expand number alters. Make sure alter-alter questions right order.","code":""},{"path":"/articles/qualtrics.html","id":"create-an-ego-centered-network-survey","dir":"Articles","previous_headings":"","what":"Create an Ego-Centered Network Survey","title":"Qualtrics & egor: Setting up and analysing an ego-centered network survey with Qualtrics and egor","text":"egor includes three template files Qualtrics surveys: Fixed-Choice Best practices Fixed-Choice Free-Choice can download template best fits needs, import Qualtrics build upon , create survey. download right-click link select “Save link …” (similar).","code":""},{"path":"/articles/qualtrics.html","id":"fixed-choice","dir":"Articles","previous_headings":"Create an Ego-Centered Network Survey","what":"Fixed-Choice","title":"Qualtrics & egor: Setting up and analysing an ego-centered network survey with Qualtrics and egor","text":"section describe logic behind fixed-choice template, following section describes changes necessary allow participants free-choice number named alters. Ego Attributes: ego attributes usually collected name generator. can well . survey items regular questions participants , therefore won’t explain set . Name Generator: section can customized, two things keep mind. First, increase number requested alters (template currently slots 5 alters), need increase number alter attribute question blocks alter-alter tie questions match. Second, fixed choice template, alter list requires participants enter alter slot continue. Alter Interpretator: Alter Attributes. template pipes names provided alter list alter attribute questions. Click instructions piping text Qualtrics. set alter attribute questions separated question block labeled alter (e.g., Alter 1 Attributes, Alter 2 Attributes). section can customized change number questions alter change wording response style question. Like standard survey—Qualtrics programming work alter attribute questions. require 5 alters, need add many blocks alter attribute questions alters listed (e.g., 10 alters listed need 10 blocks alter attribute questions). recommend finalizing question wording format Block 1 alter attribute questions copying block many alters requested list. , block, adjust code piped text refers appropriate list slot (e.g., Block 2 alter attribute questions pipe response second list slot alter list). Alter-Alter ties. template 10 alter-alter tie questions template asks 5 alters. request 5 alters, need add corresponding number questions section (e.g., requesting 30 alters means asking 30*(30-1)/2=435 alter-alter tie questions). questions pipe names alter list using piped text code alter attribute section. , recommend finalizing question wording style first alter-alter tie question copy-pasting question many times needed adjusting piped text question refers correct name alter list. important sort order alter-alter tie questions ties alter 1 (e.g., alter 2, 3, 4, …) appear first, followed ties alter 2 (e.g., alter 3, 4, …) . process ensures alter attributes alter-alter ties can connected correctly analyzing data.","code":""},{"path":"/articles/qualtrics.html","id":"free-choice","dir":"Articles","previous_headings":"Create an Ego-Centered Network Survey","what":"Free-Choice","title":"Qualtrics & egor: Setting up and analysing an ego-centered network survey with Qualtrics and egor","text":"describe survey display logic changes necessary allow participants chose many alters name. always upper limit alters can named, selecting high number , can make sure participants can name alters want. time high maximum number also lead significant amount additional work survey creation. Also additional alter named participant respond alter attribute alter-alter questions. Ego Attributes: changes needed . Name Generator: give participants option leave names alter list blank, skip/delete Custom Validations check name fields contain names. Alter Attributes: free choice format, want display number alter attribute blocks alters listed alter list. Thus, need employ display logic using Survey Flow tab Qualtrics define conditions display alter attribute block.\\ Alter-Alter Ties. Add Display logic alter-alter pair question hide questions one alters question refers left blank. recommend preparing finalizing one alter-alter tie question including Display Logic copy question many times needed adjust piped text Display Logic alter-alter combination.","code":""},{"path":"/articles/qualtrics.html","id":"downloading-the-data-and-importing-it-with-egor","dir":"Articles","previous_headings":"","what":"Downloading the data and importing it with egor","title":"Qualtrics & egor: Setting up and analysing an ego-centered network survey with Qualtrics and egor","text":"Download data qualtrics CSV format. Click instructions downloading data Qualtrics Import data R egor object code . need filter entries alters left blank respondents survey structured possible alter entry. step technically necessary certain respondents named maximum number alters. logic behind step first create logical vector marks alter TRUE (= exists) name cell alter empty FALSE empty. Next logical vector applied alter dataset egor object filter empty alter entries. Similar alter data alter-alter ties contain rows represent ties alters might exist. can filtered excluding rows/ alter-alter ties empty weight variable. Inspect egor object. Start analysis. Take look Using Egor vignette learn visualize analyze ego-centered network data egor.","code":"qu_data <- read.csv(file = \"filename.csv\") # Replace file name with full data set name! qu_data <- qu_data[3:nrow(qu_data),]  # Create egoID qu_data$egoID <- 1:nrow(qu_data)  library(egor) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> Loading required package: tibble  e1 <- onefile_to_egor(egos = qu_data,                       ID.vars = list(ego = \"egoID\"),                       attr.start.col = \"A1Gender\", # Name of Variable with the first alter attribute                       attr.end.col = \"X5.5\", # Name of variable with last alter attribute                       max.alters = 5, # Number of maximum alters that were named by participants                       aa.first.var = \"AP1\") # Name of first alter-alter variable #> Sorting data by egoID: #> Done. #> Transforming alters data to long format: #> Done. #> Transforming wide dyad data to edgelist: #> Done. #> Note: Make sure to filter out alter-alter ties with invalid weight values. #> Warning in onefile_to_egor(egos = qu_data, ID.vars = list(ego = \"egoID\"), : No #> netsize values provided, make sure to filter out invalid alter entries. alter_filter <-    e1 %>%    as_tibble() %>%    arrange(.egoID) %>%    select(AlterList_1:AlterList_5) %>%    mutate(across(.fns = ~. != \"\")) %>%    as.data.frame() %>%    tidyr::pivot_longer(cols = everything()) %>%    pull(value) #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `across(.fns = ~. != \"\")`. #> Caused by warning: #> ! Using `across()` without supplying `.cols` was deprecated in dplyr 1.1.0. #> ℹ Please supply `.cols` instead.  e1 <-    e1 %>%    activate(alter) %>%    filter(alter_filter) e1 <-    e1 %>%    activate(aatie) %>%    filter(weight != \"\") e1 #> # EGO data: 5 × 28 #>   .egoID StartDate       EndDate Status IPAddress Progress Duration..in.seconds. #> * <chr>  <chr>           <chr>   <chr>  <chr>     <chr>    <chr>                 #> 1 1      2021-03-25 08:… 2021-0… Surve… \"\"        100      0                     #> 2 2      2021-03-25 08:… 2021-0… Surve… \"\"        100      0                     #> 3 3      2021-03-25 08:… 2021-0… Surve… \"\"        100      0                     #> # ℹ 2 more rows #> # ℹ 21 more variables: Finished <chr>, RecordedDate <chr>, ResponseId <chr>, #> #   RecipientLastName <chr>, RecipientFirstName <chr>, RecipientEmail <chr>, #> #   ExternalReference <chr>, LocationLatitude <chr>, LocationLongitude <chr>, #> #   DistributionChannel <chr>, UserLanguage <chr>, ZipCode <chr>, #> #   AlterList_1 <chr>, AlterList_2 <chr>, AlterList_3 <chr>, AlterList_4 <chr>, #> #   AlterList_5 <chr>, ID <chr>, Q_TotalDuration <chr>, gc <chr>, term <chr> #> # ALTER data: 7 × 8 #>   .altID .egoID A1Gender      A1age A1relation A1Location_1 A1Location_2 A1Close #> * <chr>  <chr>  <chr>         <chr> <chr>      <chr>        <chr>        <chr>   #> 1 1      4      Choose Not t… Choo… Other      ad           \"asd\"        Very c… #> 2 2      4      Female        40-49 Spouse     asd          \"asd\"        Not cl… #> 3 1      5      Choose Not t… 31-39 School     asd          \"\"           Somewh… #> # ℹ 4 more rows #> # AATIE data (active): 11 × 4 #>   .egoID .srcID .tgtID weight #> * <chr>  <chr>  <chr>  <chr>  #> 1 4      1      2      Maybe  #> 2 5      1      2      Yes    #> 3 5      1      3      Maybe  #> 4 5      1      4      No     #> 5 5      1      5      Maybe  #> # ℹ 6 more rows     summary(e1) #> 5 Egos/ Ego Networks  #> 7 Alters  #> Min. Netsize 0  #> Average Netsize 1.4  #> Max. Netsize 5  #> Average Density 1  #> Alter survey design: #>   Maximum nominations: 5"},{"path":"/articles/using_egor.html","id":"the-egor-package","dir":"Articles","previous_headings":"","what":"The egor Package","title":"Using `egor` to analyse ego-centered network data","text":"egor provides import functions egor object organizes ego-centered network, allowing smooth workflow dplyr methods: enable tidy data analysis strategies descriptive analysis (network composition, density, homophily, diversity) visualization (clustered graphs, egographs, egogram) interactive visualization app egor object contains data levels associated ego-centered network analysis, levels : ego, alter, alter-alter ties. providing egor()-function data.frames containing data corresponding data levels, construct egor object. example data.frames look like. Pay attention ID variables connecting levels . First rows alter data. First rows ego data. First rows alter-alter tie data. three data.frames contain egoID identifying unique ego connecting personal data alter alter-alter tie data. alterID alter data reused alter-alter tie data Source Target columns. Let’s create egor object data just loaded. [egor] object [list] three [tibbles], named “ego”, “alter” “aatie”, containing ego, alter alter-alter tie data.","code":"library(egor) data(\"alters32\") data(\"egos32\") data(\"aaties32\") e1 <- egor(alters = alters32,            egos = egos32,            aaties = aaties32,            ID.vars = list(              ego = \".EGOID\",              alter = \".ALTID\",              source = \".SRCID\",              target = \".TGTID\")) e1 #> # EGO data (active): 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <chr> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      4 w     18 - 25         21 Poland     29565 #> 5      5 m     0 - 17           9 Germany    15330 #> # ℹ 27 more rows #> # ALTER data: 384 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     46 - 55        48 USA        45625 #> 2      2      1 m     0 - 17          5 Germany    52925 #> 3      3      1 w     26 - 35        35 Australia  60225 #> # ℹ 381 more rows #> # AATIE data: 1,056 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     20      1      2  0.667 #> 2     25      6     10  0.667 #> 3      9      6      8  0.667 #> # ℹ 1,053 more rows"},{"path":"/articles/using_egor.html","id":"import","dir":"Articles","previous_headings":"","what":"Import","title":"Using `egor` to analyse ego-centered network data","text":"currently three importing functions read data disk load egor object. addition three functions help transformation common data formats ego-centered network data egor objects:","code":"read_openeddi() read_egoweb() read_egonet() onefile_to_egor() twofiles_to_egor() threefiles_to_egor()"},{"path":"/articles/using_egor.html","id":"manipulate","dir":"Articles","previous_headings":"","what":"Manipulate","title":"Using `egor` to analyse ego-centered network data","text":"Manipulating egor object can done base R functions dplyr verbs.","code":""},{"path":"/articles/using_egor.html","id":"base-r","dir":"Articles","previous_headings":"Manipulate","what":"Base R","title":"Using `egor` to analyse ego-centered network data","text":"different data levels egor object can manipulated using square bracket subsetting subset() function. Ego level: Alter level: Alter-alter tie level:","code":"e1[e1$ego$age.years > 35, ] #> # EGO data (active): 19 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <chr> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      3 m     66 - 100        74 Germany    20805 #> 3      7 m     66 - 100        84 Australia  19345 #> 4      8 w     66 - 100       100 Poland     35040 #> 5      9 m     36 - 45         38 USA        64605 #> # ℹ 14 more rows #> # ALTER data: 228 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     46 - 55        48 USA        45625 #> 2      2      1 m     0 - 17          5 Germany    52925 #> 3      3      1 w     26 - 35        35 Australia  60225 #> # ℹ 225 more rows #> # AATIE data: 641 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     25      6     10  0.667 #> 2      9      6      8  0.667 #> 3      7      3      6  0.667 #> # ℹ 638 more rows subset(e1, e1$alter$sex == \"w\", unit = \"alter\") #> # EGO data (active): 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <chr> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      4 w     18 - 25         21 Poland     29565 #> 5      5 m     0 - 17           9 Germany    15330 #> # ℹ 27 more rows #> # ALTER data: 204 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      3      1 w     26 - 35        35 Australia  60225 #> 2      4      1 w     0 - 17          3 Poland     25550 #> 3      6      1 w     26 - 35        29 Germany     8395 #> # ℹ 201 more rows #> # AATIE data: 300 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     25      6     10  0.667 #> 2      9      6      8  0.667 #> 3      7      3      6  0.667 #> # ℹ 297 more rows subset(e1, e1$aatie$weight > 0.5, unit = \"aatie\") #> # EGO data (active): 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <chr> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      4 w     18 - 25         21 Poland     29565 #> 5      5 m     0 - 17           9 Germany    15330 #> # ℹ 27 more rows #> # ALTER data: 384 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     46 - 55        48 USA        45625 #> 2      2      1 m     0 - 17          5 Germany    52925 #> 3      3      1 w     26 - 35        35 Australia  60225 #> # ℹ 381 more rows #> # AATIE data: 721 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     20      1      2  0.667 #> 2     25      6     10  0.667 #> 3      9      6      8  0.667 #> # ℹ 718 more rows"},{"path":"/articles/using_egor.html","id":"activate-and-dplyr-verbs","dir":"Articles","previous_headings":"Manipulate","what":"activate() and dplyr verbs","title":"Using `egor` to analyse ego-centered network data","text":"egor object can manipulated dplyr verbs. Using activate() command, data level execute manipulations , can changed. concept borrowed tidygraph package. manipulation leads deletion egos, respective alters alter-alter ties deleted well. Similarly deletions alters lead exclusion alter-alter ties deleted alters.","code":"e1 %>%    filter(income > 36000) #> # EGO data (active): 10 × 6 #>   .egoID sex   age     age.years country   income #> *  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      9 m     36 - 45        38 USA        64605 #> 2     10 m     0 - 17         14 Australia  49275 #> 3     11 w     26 - 35        27 Germany    37960 #> 4     12 m     56 - 65        57 Germany    54750 #> 5     15 w     26 - 35        28 Germany    46720 #> # ℹ 5 more rows #> # ALTER data: 120 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      1      9 m     46 - 55        48 USA        45625 #> 2      2      9 m     0 - 17          5 Germany    52925 #> 3      3      9 w     26 - 35        35 Australia  60225 #> # ℹ 117 more rows #> # AATIE data: 333 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     20      1      2  0.667 #> 2      9      6      8  0.667 #> 3     11      9     11  0.333 #> # ℹ 330 more rows  e1 %>%    activate(alter) %>%    filter(country %in% c(\"USA\", \"Poland\")) #> # EGO data: 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <chr> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> # ℹ 29 more rows #> # ALTER data (active): 180 × 7 #>   .altID .egoID sex   age     age.years country income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>    <dbl> #> 1      1      1 m     46 - 55        48 USA      45625 #> 2      4      1 w     0 - 17          3 Poland   25550 #> 3      7      1 m     26 - 35        32 USA      54020 #> 4      8      1 w     46 - 55        49 USA      60955 #> 5     11      1 w     46 - 55        54 Poland    9490 #> # ℹ 175 more rows #> # AATIE data: 218 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     31      2     10  0.667 #> 2     24      1     12  0.333 #> 3      7      3      6  0.667 #> # ℹ 215 more rows  e1 %>%    activate(aatie) %>%    filter(weight > 0.7) #> # EGO data: 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <chr> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> # ℹ 29 more rows #> # ALTER data: 384 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     46 - 55        48 USA        45625 #> 2      2      1 m     0 - 17          5 Germany    52925 #> 3      3      1 w     26 - 35        35 Australia  60225 #> # ℹ 381 more rows #> # AATIE data (active): 374 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     26      2     10      1 #> 2     15      6     10      1 #> 3     16      3      6      1 #> 4     24      2      8      1 #> 5     26      6     11      1 #> # ℹ 369 more rows"},{"path":"/articles/using_egor.html","id":"analyse","dir":"Articles","previous_headings":"","what":"Analyse","title":"Using `egor` to analyse ego-centered network data","text":"Try function analyse egor object.","code":""},{"path":"/articles/using_egor.html","id":"summary","dir":"Articles","previous_headings":"Analyse","what":"Summary","title":"Using `egor` to analyse ego-centered network data","text":"","code":"summary(e1) #> 32 Egos/ Ego Networks  #> 384 Alters  #> Min. Netsize 12  #> Average Netsize 12  #> Max. Netsize 12  #> Average Density 0.5  #> Alter survey design: #>   Maximum nominations: Inf"},{"path":"/articles/using_egor.html","id":"density","dir":"Articles","previous_headings":"Analyse","what":"Density","title":"Using `egor` to analyse ego-centered network data","text":"","code":"ego_density(e1) #> # A tibble: 32 × 2 #>    .egoID density #>     <dbl>   <dbl> #>  1      1   0.485 #>  2      2   0.5   #>  3      3   0.5   #>  4      4   0.409 #>  5      5   0.561 #>  6      6   0.455 #>  7      7   0.652 #>  8      8   0.485 #>  9      9   0.515 #> 10     10   0.515 #> # ℹ 22 more rows"},{"path":"/articles/using_egor.html","id":"composition","dir":"Articles","previous_headings":"Analyse","what":"Composition","title":"Using `egor` to analyse ego-centered network data","text":"","code":"composition(e1, \"age\") %>%   head() %>%   kable()"},{"path":"/articles/using_egor.html","id":"diversity","dir":"Articles","previous_headings":"Analyse","what":"Diversity","title":"Using `egor` to analyse ego-centered network data","text":"","code":"alts_diversity_count(e1, \"age\") #> # A tibble: 32 × 2 #>    .egoID diversity #>     <dbl>     <dbl> #>  1      1         5 #>  2      2         5 #>  3      3         6 #>  4      4         6 #>  5      5         5 #>  6      6         6 #>  7      7         5 #>  8      8         5 #>  9      9         5 #> 10     10         5 #> # ℹ 22 more rows alts_diversity_entropy(e1, \"age\") #> # A tibble: 32 × 2 #>    .egoID entropy #>     <dbl>   <dbl> #>  1      1    2.19 #>  2      2    2.19 #>  3      3    2.42 #>  4      4    2.36 #>  5      5    2.19 #>  6      6    2.46 #>  7      7    2.08 #>  8      8    2.13 #>  9      9    2.19 #> 10     10    2.19 #> # ℹ 22 more rows"},{"path":"/articles/using_egor.html","id":"ego-alter-homophily-ei-index","dir":"Articles","previous_headings":"Analyse","what":"Ego-Alter Homophily (EI-Index)","title":"Using `egor` to analyse ego-centered network data","text":"","code":"comp_ei(e1, \"age\", \"age\") #> # A tibble: 32 × 2 #>    .egoID    ei #>     <dbl> <dbl> #>  1      1 0.833 #>  2      2 1     #>  3      3 0.333 #>  4      4 0.833 #>  5      5 0.5   #>  6      6 0.667 #>  7      7 0.333 #>  8      8 0.333 #>  9      9 1     #> 10     10 0.333 #> # ℹ 22 more rows"},{"path":"/articles/using_egor.html","id":"ei-index-for-alter-alter-ties","dir":"Articles","previous_headings":"Analyse","what":"EI-Index for Alter-Alter Ties","title":"Using `egor` to analyse ego-centered network data","text":"","code":"EI(e1, \"age\") %>%   head() %>%   kable()"},{"path":"/articles/using_egor.html","id":"count-attribute-combinations-in-alter-alter-ties-dyads","dir":"Articles","previous_headings":"Analyse","what":"Count attribute combinations in alter-alter ties/ dyads","title":"Using `egor` to analyse ego-centered network data","text":"","code":"# return results as \"wide\" tibble   count_dyads(     object = e1,     alter_var_name = \"country\"   ) #> # A tibble: 32 × 11 #>    .egoID dy_cou_Australia_Austr…¹ dy_cou_Australia_Ger…² dy_cou_Australia_Pol…³ #>     <dbl>                    <int>                  <int>                  <int> #>  1      1                        2                      6                      3 #>  2      2                        0                      2                      0 #>  3      3                        4                      6                      4 #>  4      4                        1                      1                      1 #>  5      5                        2                     11                      4 #>  6      6                        2                      1                      1 #>  7      7                        0                      5                      7 #>  8      8                        1                      7                      1 #>  9      9                        1                      6                      4 #> 10     10                        0                      3                      1 #> # ℹ 22 more rows #> # ℹ abbreviated names: ¹​dy_cou_Australia_Australia, ²​dy_cou_Australia_Germany, #> #   ³​dy_cou_Australia_Poland #> # ℹ 7 more variables: dy_cou_Australia_USA <int>, dy_cou_Germany_Germany <int>, #> #   dy_cou_Germany_Poland <int>, dy_cou_Germany_USA <int>, #> #   dy_cou_Poland_USA <int>, dy_cou_USA_USA <int>, dy_cou_Poland_Poland <int>  # return results as \"long\" tibble   count_dyads(     object = e1,     alter_var_name = \"country\",     return_as = \"long\"   ) #> # A tibble: 278 × 3 #>    .egoID dyads                   n #>     <dbl> <chr>               <int> #>  1      1 Australia_Australia     2 #>  2      1 Australia_Germany       6 #>  3      1 Australia_Poland        3 #>  4      1 Australia_USA           3 #>  5      1 Germany_Germany         3 #>  6      1 Germany_Poland          4 #>  7      1 Germany_USA             6 #>  8      1 Poland_USA              2 #>  9      1 USA_USA                 3 #> 10      2 Australia_Germany       2 #> # ℹ 268 more rows"},{"path":"/articles/using_egor.html","id":"comp_ply","dir":"Articles","previous_headings":"Analyse","what":"comp_ply()","title":"Using `egor` to analyse ego-centered network data","text":"comp_ply() applies user-defined function alter attribute returns numeric vector results. can used apply base R functions like sd(), mean() functions packages.","code":"e2 <- make_egor(15, 32) comp_ply(e2, \"age.years\", sd, na.rm = TRUE) #> # A tibble: 15 × 2 #>    .egoID result #>     <dbl>  <dbl> #>  1      1   26.5 #>  2      2   28.0 #>  3      3   25.5 #>  4      4   23.3 #>  5      5   25.0 #>  6      6   27.6 #>  7      7   27.7 #>  8      8   23.5 #>  9      9   26.5 #> 10     10   26.9 #> 11     11   24.8 #> 12     12   24.8 #> 13     13   26.5 #> 14     14   27.5 #> 15     15   27.8"},{"path":[]},{"path":"/articles/using_egor.html","id":"clustered-graphs","dir":"Articles","previous_headings":"Visualize","what":"Clustered Graphs","title":"Using `egor` to analyse ego-centered network data","text":"","code":"data(\"egor32\")  # Simplify networks to clustered graphs, stored as igraph objects graphs <- clustered_graphs(egor32, \"age\")   # Visualize par(mfrow = c(2,2), mar = c(0,0,0,0)) vis_clustered_graphs(graphs[1:3],                       node.size.multiplier = 1,                       edge.width.multiplier = 1,                      label.size = 0.6) graphs2 <- clustered_graphs(make_egor(50, 50)[1:4], \"country\")   vis_clustered_graphs(graphs2[1:3],                       node.size.multiplier = 1,                       edge.width.multiplier = 3,                      label.size = 0.6,                      labels = FALSE)"},{"path":"/articles/using_egor.html","id":"igraph-network-plotting","dir":"Articles","previous_headings":"Visualize","what":"igraph & network plotting","title":"Using `egor` to analyse ego-centered network data","text":"as_igraph() converts egor object list igraph objects. as_network() converts egor object list network objects.","code":"par(mar = c(0, 0, 0, 0), mfrow = c(2, 2)) purrr::walk(as_igraph(egor32)[1:4], plot) purrr::walk(as_network(egor32)[1:4], plot) plot(egor32) plot(make_egor(32,16), venn_var = \"sex\", pie_var = \"country\", type = \"egogram\")"},{"path":"/articles/using_egor.html","id":"shiny-app-for-visualization","dir":"Articles","previous_headings":"Visualize","what":"Shiny App for Visualization","title":"Using `egor` to analyse ego-centered network data","text":"egor_vis_app() starts Shiny app offers graphical interface adjusting visualization parameters networks stored egor object.","code":"egor_vis_app(egor32)"},{"path":"/articles/using_egor.html","id":"conversions","dir":"Articles","previous_headings":"","what":"Conversions","title":"Using `egor` to analyse ego-centered network data","text":"as_igraph() as_network() ego networks transformed list igraph/network objects.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Till Krenz. Author, maintainer. Pavel N. Krivitsky. Author. Raffaele Vacca. Author. Michal Bojanowski. Author. Markus Gamper. Contributor. Andreas Herz. Author. Christopher McCarty. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krenz T, Krivitsky P, Vacca R, Bojanowski M, Herz (2025). egor: Import Analyse Ego-Centered Network Data. R package version 1.25.10, https://github.com/tilltnet/egor.","code":"@Manual{,   title = {egor: Import and Analyse Ego-Centered Network Data},   author = {Till Krenz and Pavel N. Krivitsky and Raffaele Vacca and Michal Bojanowski and Andreas Herz},   year = {2025},   note = {R package version 1.25.10},   url = {https://github.com/tilltnet/egor}, }"},{"path":"/index.html","id":"egor","dir":"","previous_headings":"","what":"Import and Analyse Ego-Centered Network Data","title":"Import and Analyse Ego-Centered Network Data","text":"Tools importing, analyzing visualizing ego-centered personal network data. egor integrates nicely tidyverse, providing methods dplyr commands. egor object contains three data levels, ego, alter alter-alter ties (aatie). order switch three data levels activate() concept lent tidygraph package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Import and Analyse Ego-Centered Network Data","text":"","code":"# Install release version from CRAN install.packages(\"egor\")  # Install development version from GitHub remotes::install_github(repo=\"tilltnet/egor\")"},{"path":"/index.html","id":"visualize","dir":"","previous_headings":"","what":"Visualize","title":"Import and Analyse Ego-Centered Network Data","text":"egor offers visualization techniques ego-centered network data: regular network plots clustered graphs ego-grams Network Visualization App providing graphical interface let’s user compose visualizations interactively.","code":""},{"path":"/index.html","id":"import-data","dir":"","previous_headings":"","what":"Import data","title":"Import and Analyse Ego-Centered Network Data","text":"egor object can created egor() command. addition functions import specific data formats ego-centered network data. currently three importing functions read data exported data collection tools hard drive load egor object. addition three functions help transformation common data formats ego-centered network data egor objects:","code":"read_openeddi() read_egoweb() read_egonet() onefile_to_egor() twofiles_to_egor() threefiles_to_egor()"},{"path":"/index.html","id":"analyse","dir":"","previous_headings":"","what":"Analyse","title":"Import and Analyse Ego-Centered Network Data","text":"commands facilitating analysis ego-centered networks. learn , please take look package vignette.","code":""},{"path":"/reference/EI.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate EI-Index of ego networks — EI","title":"Calculate EI-Index of ego networks — EI","text":"EI-Index division surplus count intra-group edges inter-group edges, divided total count edges. implementation uses intra-group inter-group density instead edge counts, rescale set TRUE (default). EI-Index calculated whole network subgroups. Alternatively, EI index can employed measurement egos tendency homo-/heterophily - use comp_ei(). variant EI-Index.","code":""},{"path":"/reference/EI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate EI-Index of ego networks — EI","text":"","code":"EI(object, alt.attr, include.ego = FALSE, ego.attr = alt.attr, rescale = TRUE)"},{"path":"/reference/EI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate EI-Index of ego networks — EI","text":"object egor object. alt.attr Character naming grouping variable. include.ego Logical. Include exclude ego EI calculation. ego.attr Character, naming ego variable corresponding ego.attr. Defaults ego.attr. rescale Logical. TRUE, EI index calculation re-scaled, EI distorted differing group sizes.","code":""},{"path":"/reference/EI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate EI-Index of ego networks — EI","text":"Returns tibble following columns: ego ID (\".egoID\") network EI-Index (\"ei\") subgroup EI-Index values (named value levels alt.attr/ego.attr)","code":""},{"path":"/reference/EI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate EI-Index of ego networks — EI","text":"whole network EI metric indicating tendency network clustered categories given factor variable (alt.attr). EI value group describes tendency group within network connected (0 1) connected (-1 0) groups. Differing group sizes can lead distortion EI values .e. ability big group form relationships much smaller group B limited size B. Even possible edges B exist, EI value group might still negative, classifying homophile. re-scaled EI-Index values provided implementation substitutes absolute edge counts inter- intra-group edge densities order avoid distortion EI-Index values. values express extend homo- heterophily network subgroups, made possible subgroup sizes.","code":""},{"path":"/reference/EI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate EI-Index of ego networks — EI","text":"Krackhardt, D., Stern, R.N., 1988. Informal networks organizational crises: experimental simulation. Social Psychology Quarterly 51 (2), 123-140. Everett, M. G., & Borgatti, S. P. (2012). Categorical attribute based centrality: E-G-F centrality. Social Networks, 34(4), 562-569.","code":""},{"path":[]},{"path":"/reference/EI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate EI-Index of ego networks — EI","text":"","code":"data(\"egor32\") EI(egor32, \"sex\") #> # A tibble: 32 × 4 #>    .egoID       ei        m        w #>     <dbl>    <dbl>    <dbl>    <dbl> #>  1      1 -0.123   -0.167   -0.100   #>  2      2 -0.0608  -0.0323  -0.0667  #>  3      3 -0.122   -0.190    0.448   #>  4      4 -0.231   -0.0323  -0.263   #>  5      5  0.0448  -0.0141   0.111   #>  6      6  0.141   -0.00917  0.674   #>  7      7  0.00705 -0.119    0.0389  #>  8      8 -0.123    0.0588  -0.355   #>  9      9 -0.0606  -0.181    0.00990 #> 10     10 -0.0286  -0.25     0.0370  #> # ℹ 22 more rows"},{"path":"/reference/aaties32.html","id":null,"dir":"Reference","previous_headings":"","what":"32 sets of randomly created alter-alter ties belonging to ego-centered networks — aaties32","title":"32 sets of randomly created alter-alter ties belonging to ego-centered networks — aaties32","text":"32 sets randomly created alter-alter ties belonging ego-centered networks","code":""},{"path":"/reference/aaties32.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"32 sets of randomly created alter-alter ties belonging to ego-centered networks — aaties32","text":"","code":"aaties32"},{"path":"/reference/aaties32.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"32 sets of randomly created alter-alter ties belonging to ego-centered networks — aaties32","text":"data frame 32 sets alter-alter relations 4 variables: .EGOID ego identifier .SRCID source alter ID .TGTID target alter ID weight weight relation","code":""},{"path":"/reference/activate.egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Activate ego, alter or alter-alter tie data level of an egor dataset — activate.egor","title":"Activate ego, alter or alter-alter tie data level of an egor dataset — activate.egor","text":"function activates one data levels egor dataset, dplyr verbs know level execute .","code":""},{"path":"/reference/activate.egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activate ego, alter or alter-alter tie data level of an egor dataset — activate.egor","text":"","code":"# S3 method for class 'egor' activate(.data, what)"},{"path":"/reference/activate.egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activate ego, alter or alter-alter tie data level of an egor dataset — activate.egor","text":".data egor dataset. Character naming level activate, can \"ego\", \"alter\" \"aatie\".","code":""},{"path":"/reference/activate.egor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Activate ego, alter or alter-alter tie data level of an egor dataset — activate.egor","text":"","code":"e <- make_egor(5,50) e %>%     activate(\"aatie\") %>%     mutate(weight2 = 2 + weight) %>%     activate(\"alter\") %>%     mutate(age.years = age.years^3) #> # EGO data: 5 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <chr> <fct>        <int> <chr>      <dbl> #> 1      1 w     66 - 100        68 USA        62415 #> 2      2 m     66 - 100        73 Poland     22630 #> 3      3 w     66 - 100        69 Australia  15695 #> # ℹ 2 more rows #> # ALTER data (active): 139 × 7 #>   .altID .egoID sex   age      age.years country   income #> *  <int>  <dbl> <chr> <fct>        <dbl> <chr>      <dbl> #> 1      1      1 m     66 - 100    636056 Australia  58400 #> 2      2      1 m     36 - 45      79507 Poland     42705 #> 3      3      1 m     0 - 17         343 Australia  59130 #> 4      4      1 w     26 - 35      32768 USA         6205 #> 5      5      1 w     46 - 55     148877 Australia  65700 #> # ℹ 134 more rows #> # AATIE data: 941 × 5 #>   .egoID .srcID .tgtID weight weight2 #> *  <int>  <int>  <int>  <dbl>   <dbl> #> 1      2     15     18  1        3    #> 2      1      4     10  0.333    2.33 #> 3      1      3     14  0.333    2.33 #> # ℹ 938 more rows"},{"path":"/reference/allbus_2010_simulated.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Allbus 2010 Data — allbus_2010_simulated","title":"Simulated Allbus 2010 Data — allbus_2010_simulated","text":"dataset simulated based original Allbus 2010 SPSS data. dataset simulates 100 respondents resemble actual Allbus respondents. variable randomly generated based range original variables, co-variations variables disregarded. data’s purpose purely demonstrate technically work Allbus data using egor R - analytical assumptions made based data!","code":""},{"path":"/reference/allbus_2010_simulated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Allbus 2010 Data — allbus_2010_simulated","text":"","code":"allbus_2010_simulated"},{"path":"/reference/allbus_2010_simulated.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Allbus 2010 Data — allbus_2010_simulated","text":"tibble/ data.frame 100 simulated respondents/ rows 981 variables/ columns. variable labelled dbl.","code":""},{"path":"/reference/allbus_2010_simulated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated Allbus 2010 Data — allbus_2010_simulated","text":"dataset contains (simulated!) answers two ego-centered name generators.","code":""},{"path":"/reference/alter_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and query the alter nomination design — alter_design","title":"Set and query the alter nomination design — alter_design","text":"Extract, set, update alter nomination design associated ego-centered dataset.","code":""},{"path":"/reference/alter_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and query the alter nomination design — alter_design","text":"","code":"alter_design(x, ...)  # S3 method for class 'egor' alter_design(x, which, ...)  alter_design(x, ...) <- value  # S3 method for class 'egor' alter_design(x, which, ...) <- value"},{"path":"/reference/alter_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and query the alter nomination design — alter_design","text":"x egor object. ... arguments passed methods name alter design setting query replace value specified, new value attribute; , named list settings replace old values.","code":""},{"path":"/reference/alters32.html","id":null,"dir":"Reference","previous_headings":"","what":"32 sets of randomly created alters belonging to ego-centered networks — alters32","title":"32 sets of randomly created alters belonging to ego-centered networks — alters32","text":"32 sets randomly created alters belonging ego-centered networks","code":""},{"path":"/reference/alters32.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"32 sets of randomly created alters belonging to ego-centered networks — alters32","text":"","code":"alters32"},{"path":"/reference/alters32.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"32 sets of randomly created alters belonging to ego-centered networks — alters32","text":"data frame 32 sets 32 alters per egoID 7 variables: .ALTID alter identifier .EGOID ego identifier age age categories age.years age years country country income income sex gender","code":""},{"path":"/reference/alts_diversity_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate diversity measures on an egor object. — alts_diversity_count","title":"Calculate diversity measures on an egor object. — alts_diversity_count","text":"alts_diversity_count() counts categories variable present networks egor object. alts_diversity_entropy() calculates Shannon entropy measurement diversity alter attribute.","code":""},{"path":"/reference/alts_diversity_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate diversity measures on an egor object. — alts_diversity_count","text":"","code":"alts_diversity_count(object, alt.attr)  alts_diversity_entropy(object, alt.attr, base = 2)"},{"path":"/reference/alts_diversity_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate diversity measures on an egor object. — alts_diversity_count","text":"object egor object. alt.attr character naming variable containing alter-attribute. base Numeric, base value logarithm entropy calculation.","code":""},{"path":"/reference/alts_diversity_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate diversity measures on an egor object. — alts_diversity_count","text":"tibble ego ID numeric result vector.","code":""},{"path":"/reference/alts_diversity_count.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate diversity measures on an egor object. — alts_diversity_count","text":"Michał Bojanowski, michal2992@gmail.com Till Krenz, egor@tillt.net","code":""},{"path":"/reference/alts_diversity_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate diversity measures on an egor object. — alts_diversity_count","text":"","code":"data(\"egor32\") alts_diversity_count(egor32, \"age\") #> # A tibble: 32 × 2 #>    .egoID diversity #>     <dbl>     <dbl> #>  1      1         5 #>  2      2         5 #>  3      3         6 #>  4      4         6 #>  5      5         5 #>  6      6         6 #>  7      7         5 #>  8      8         5 #>  9      9         5 #> 10     10         5 #> # ℹ 22 more rows alts_diversity_entropy(egor32, \"age\") #> # A tibble: 32 × 2 #>    .egoID entropy #>     <dbl>   <dbl> #>  1      1    2.19 #>  2      2    2.19 #>  3      3    2.42 #>  4      4    2.36 #>  5      5    2.19 #>  6      6    2.46 #>  7      7    2.08 #>  8      8    2.13 #>  9      9    2.19 #> 10     10    2.19 #> # ℹ 22 more rows"},{"path":"/reference/append_egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Append rows/columns to ego, alter or aatie data — append_egor","title":"Append rows/columns to ego, alter or aatie data — append_egor","text":"work like dplyr's bind_cols() bind_rows(). first argument egor object. Additional rows/columns added bottom/RHS active data level (ego, alter, aatie).","code":""},{"path":"/reference/append_egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append rows/columns to ego, alter or aatie data — append_egor","text":"","code":"append_rows(.egor, ..., .id = NULL)  append_cols(.egor, ...)"},{"path":"/reference/append_egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append rows/columns to ego, alter or aatie data — append_egor","text":".egor egor object. ... Data frames combine. .id Data frame identifier.","code":""},{"path":"/reference/append_egor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append rows/columns to ego, alter or aatie data — append_egor","text":"egor object containing additional rows/ columns active level.","code":""},{"path":"/reference/append_egor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append rows/columns to ego, alter or aatie data — append_egor","text":"","code":"e <- make_egor(12, 15)  # Adding a column to the ego level additional_ego_columns <-   tibble(x = sample(1:3, 12, replace = TRUE))    append_cols(e, additional_ego_columns) #> # EGO data (active): 12 × 7 #>   .egoID sex   age      age.years country   income     x #> *  <dbl> <chr> <fct>        <int> <chr>      <dbl> <int> #> 1      1 w     26 - 35         32 Australia  35405     1 #> 2      2 w     66 - 100        80 Australia  60955     1 #> 3      3 w     56 - 65         63 Germany     1825     2 #> 4      4 m     66 - 100        95 Australia   7665     3 #> 5      5 w     56 - 65         63 USA        17885     2 #> # ℹ 7 more rows #> # ALTER data: 103 × 7 #>   .altID .egoID sex   age      age.years country income #> *  <int>  <dbl> <chr> <fct>        <int> <chr>    <dbl> #> 1      1      1 w     66 - 100        98 Poland   51830 #> 2      2      1 m     0 - 17          13 Germany  17885 #> 3      3      1 m     66 - 100        96 USA      10220 #> # ℹ 100 more rows #> # AATIE data: 244 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1      8      5     11  0.333 #> 2      4      2      4  1     #> 3     10      3      7  1     #> # ℹ 241 more rows  # Adding rows to the ego and alter level additional_ego_rows <-   list(     .egoID = 13,     sex = \"w\",     age = factor(\"56 - 65\"),     age.years = 60,     country = \"Australia\"   ) %>%   as_tibble()    additional_alter_rows <-   list(     .altID = 1:5,     .egoID = rep(13, 5),     sex = sample(c(\"f\", \"m\"), 5, replace = TRUE)   ) %>%   as_tibble()    append_rows(e, additional_ego_rows) %>%   activate(alter) %>%   append_rows(additional_alter_rows) #> # EGO data: 13 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <chr> <fct>        <dbl> <chr>      <dbl> #> 1      1 w     26 - 35         32 Australia  35405 #> 2      2 w     66 - 100        80 Australia  60955 #> 3      3 w     56 - 65         63 Germany     1825 #> # ℹ 10 more rows #> # ALTER data (active): 108 × 7 #>   .altID .egoID sex   age      age.years country   income #> *  <int>  <dbl> <chr> <fct>        <int> <chr>      <dbl> #> 1      1      1 w     66 - 100        98 Poland     51830 #> 2      2      1 m     0 - 17          13 Germany    17885 #> 3      3      1 m     66 - 100        96 USA        10220 #> 4      4      1 m     0 - 17           5 Australia  71540 #> 5      5      1 w     66 - 100        82 Poland      5475 #> # ℹ 103 more rows #> # AATIE data: 244 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1      8      5     11  0.333 #> 2      4      2      4  1     #> 3     10      3      7  1     #> # ℹ 241 more rows"},{"path":"/reference/as_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert egor object to network or igraph objects — as_igraph","title":"Convert egor object to network or igraph objects — as_igraph","text":"functions convert egor object list network igraph objects. default ego included created objects, parameter (include.egor) allows including ego.","code":""},{"path":"/reference/as_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert egor object to network or igraph objects — as_igraph","text":"","code":"as_igraph(   x,   directed = FALSE,   include.ego = FALSE,   ego.attrs = NULL,   ego.alter.weights = NULL,   graph.attrs = \".egoID\" )  # S3 method for class 'egor' as.igraph(   x,   directed = FALSE,   include.ego = FALSE,   ego.attrs = NULL,   ego.alter.weights = NULL,   graph.attrs = \".egoID\" )  as_network(   x,   directed = FALSE,   include.ego = FALSE,   ego.attrs = NULL,   ego.alter.weights = NULL,   graph.attrs = \".egoID\" )  # S3 method for class 'egor' as.network(   x,   directed = FALSE,   include.ego = FALSE,   ego.attrs = NULL,   ego.alter.weights = NULL,   graph.attrs = \".egoID\" )"},{"path":"/reference/as_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert egor object to network or igraph objects — as_igraph","text":"x egor object. directed Logical, indicating alter-alter relations directed. include.ego Logical. ego included? ego.attrs Vector names (character) indices (numeric) ego variables carried  network/ igraph objects. ignored, include.ego = FALSE (default). ego.alter.weights Vector names (character) indices (numeric) alter variables carried network/ igraph objects, edge attributes ego-alter relations. ignored, `include.ego = FALSE“ (default). graph.attrs Vector names (character) indices (numeric) ego variables supposed carried igraph object graph attributes network object network attributes. default .egoID carried .","code":""},{"path":"/reference/as_igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert egor object to network or igraph objects — as_igraph","text":"names variables specified ego.attr ego.alter.attr need names corresponding alter attributes, order variables merged successfully resulting network/ igraph object (see example).","code":""},{"path":"/reference/as_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert egor object to network or igraph objects — as_igraph","text":"","code":"e <- make_egor(3, 22) as_igraph(e) #> [[1]] #> IGRAPH 789404c DNW- 22 120 --  #> + attr: .egoID (g/c), name (v/c), .egoID (v/c), sex (v/c), age (v/x), #> | age.years (v/n), country (v/c), income (v/n), .egoID (e/c), weight #> | (e/n) #> + edges from 789404c (vertex names): #>  [1] 5 ->13 17->20 15->20 1 ->11 13->21 4 ->5  7 ->15 8 ->15 4 ->16 9 ->11 #> [11] 6 ->15 1 ->21 7 ->17 9 ->17 2 ->16 4 ->8  9 ->14 16->22 5 ->20 10->13 #> [21] 6 ->17 6 ->18 8 ->13 1 ->14 11->17 11->15 11->20 8 ->12 4 ->22 4 ->10 #> [31] 10->19 7 ->16 3 ->14 4 ->15 12->20 3 ->20 18->20 6 ->10 11->12 4 ->12 #> [41] 8 ->20 21->22 2 ->12 16->20 5 ->19 11->18 15->22 9 ->12 8 ->9  4 ->9  #> [51] 1 ->16 3 ->13 2 ->13 6 ->9  9 ->18 7 ->13 1 ->19 13->14 18->19 1 ->7  #> + ... omitted several edges #>  #> [[2]] #> IGRAPH 4dd9d1b DNW- 8 12 --  #> + attr: .egoID (g/c), name (v/c), .egoID (v/c), sex (v/c), age (v/x), #> | age.years (v/n), country (v/c), income (v/n), .egoID (e/c), weight #> | (e/n) #> + edges from 4dd9d1b (vertex names): #>  [1] 1->8 4->6 1->5 5->8 2->4 2->5 1->6 2->6 6->8 3->4 1->4 7->8 #>  #> [[3]] #> IGRAPH 9c96462 DNW- 11 25 --  #> + attr: .egoID (g/c), name (v/c), .egoID (v/c), sex (v/c), age (v/x), #> | age.years (v/n), country (v/c), income (v/n), .egoID (e/c), weight #> | (e/n) #> + edges from 9c96462 (vertex names): #>  [1] 2 ->4  1 ->9  2 ->11 6 ->8  1 ->3  8 ->10 4 ->6  3 ->9  3 ->7  7 ->9  #> [11] 6 ->10 3 ->6  6 ->7  1 ->8  5 ->8  4 ->7  3 ->4  5 ->9  3 ->11 7 ->11 #> [21] 8 ->11 7 ->10 2 ->5  2 ->9  10->11 #>"},{"path":"/reference/as_tibble.egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract ego, alter, and alter-alter tables from an egor object. — as_tibble.egor","title":"Extract ego, alter, and alter-alter tables from an egor object. — as_tibble.egor","text":"Provided egor object, functions create \"global\" tibble srvyr's srvyr::tbl_svy object containing egos, alter attributes, alter-alter relations. resulting tables useful advanced analysis procedures, e.g. multi-level regressions. tibble::as_tibble() method egor extracts currently active component (ego, alter, aaties) table, optionally joining others, dropping survey design information. srvyr::as_survey() method egor instead returns srvyr srvyr::tbl_svy survey, taking account replication due multiple alters alter-alter ties incident ego. design specified egos, default design (simple random sample replacement) assumed starting point. as_egos_df(), as_alters_df(), as_aaties_df(), as_egos_survey(), as_alters_survey(), as_aaties_survey() convenience functions as_tibble() as_survey() methods, activating corresponding component egor object.","code":""},{"path":"/reference/as_tibble.egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract ego, alter, and alter-alter tables from an egor object. — as_tibble.egor","text":"","code":"# S3 method for class 'egor' as_tibble(x, ..., include.ego.vars = FALSE, include.alter.vars = FALSE)  # S3 method for class 'egor' as_survey(.data, ..., include.ego.vars = FALSE, include.alter.vars = FALSE)  as_egos_df(object)  as_alters_df(object, include.ego.vars = FALSE)  as_aaties_df(object, include.ego.vars = FALSE, include.alter.vars = FALSE)  as_egos_survey(object, include.ego.vars = FALSE)  as_alters_survey(object, include.ego.vars = FALSE)  as_aaties_survey(object, include.ego.vars = FALSE, include.alter.vars = FALSE)"},{"path":"/reference/as_tibble.egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract ego, alter, and alter-alter tables from an egor object. — as_tibble.egor","text":"x, object, .data egor object. ... Additional arguments, currently unused. include.ego.vars Logical, specifying ego variables included result. include.alter.vars Logical, specifying alter variables included result.","code":""},{"path":"/reference/as_tibble.egor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract ego, alter, and alter-alter tables from an egor object. — as_tibble.egor","text":"tibble as_tibble *_df functions tbl_svy as_survey *_survey functions.","code":""},{"path":"/reference/as_tibble.egor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract ego, alter, and alter-alter tables from an egor object. — as_tibble.egor","text":"","code":"# Load example data data(egor32)  as_tibble(egor32) # Ego table. #> # A tibble: 32 × 6 #>    .egoID sex   age      age.years country   income #>     <dbl> <fct> <fct>        <int> <chr>      <dbl> #>  1      1 m     56 - 65         63 Australia  29930 #>  2      2 m     26 - 35         33 Germany    17885 #>  3      3 m     66 - 100        74 Germany    20805 #>  4      4 w     18 - 25         21 Poland     29565 #>  5      5 m     0 - 17           9 Germany    15330 #>  6      6 m     0 - 17           6 Australia  23360 #>  7      7 m     66 - 100        84 Australia  19345 #>  8      8 w     66 - 100       100 Poland     35040 #>  9      9 m     36 - 45         38 USA        64605 #> 10     10 m     0 - 17          14 Australia  49275 #> # ℹ 22 more rows  egor32 %>%  activate(\"alter\") %>%  as_tibble(include.ego.vars=TRUE) # Alter table, but also with ego variables. #> # A tibble: 384 × 12 #>    .altID .egoID sex   age      age.years country   income sex_ego age_ego #>     <int>  <dbl> <fct> <fct>        <int> <chr>      <dbl> <fct>   <fct>   #>  1      1      1 m     46 - 55         48 USA        45625 m       56 - 65 #>  2      2      1 m     0 - 17           5 Germany    52925 m       56 - 65 #>  3      3      1 w     26 - 35         35 Australia  60225 m       56 - 65 #>  4      4      1 w     0 - 17           3 Poland     25550 m       56 - 65 #>  5      5      1 m     66 - 100        97 Australia  45260 m       56 - 65 #>  6      6      1 w     26 - 35         29 Germany     8395 m       56 - 65 #>  7      7      1 m     26 - 35         32 USA        54020 m       56 - 65 #>  8      8      1 w     46 - 55         49 USA        60955 m       56 - 65 #>  9      9      1 m     56 - 65         60 Germany    39055 m       56 - 65 #> 10     10      1 w     46 - 55         52 Australia   7300 m       56 - 65 #> # ℹ 374 more rows #> # ℹ 3 more variables: age.years_ego <int>, country_ego <chr>, income_ego <dbl>  library(srvyr) #>  #> Attaching package: ‘srvyr’ #> The following object is masked from ‘package:stats’: #>  #>     filter as_survey(egor32) # Ego table with survey design. #> Independent Sampling design (with replacement) #> Called via srvyr #> Data variables:  #>   - .egoID (dbl), sex (fct), age (fct), age.years (int), country (chr), income #>     (dbl)  # Despite alter table being active, obtain the ego table. (egor32 <- activate(egor32, \"alter\")) #> # EGO data with survey design: 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> # ℹ 29 more rows #> # ALTER data (active): 384 × 7 #>   .altID .egoID sex   age      age.years country   income #> *  <int>  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1      1 m     46 - 55         48 USA        45625 #> 2      2      1 m     0 - 17           5 Germany    52925 #> 3      3      1 w     26 - 35         35 Australia  60225 #> 4      4      1 w     0 - 17           3 Poland     25550 #> 5      5      1 m     66 - 100        97 Australia  45260 #> # ℹ 379 more rows #> # AATIE data: 1,056 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     20      1      2  0.667 #> 2     25      6     10  0.667 #> 3      9      6      8  0.667 #> # ℹ 1,053 more rows as_egos_df(egor32) #> # A tibble: 32 × 6 #>    .egoID sex   age      age.years country   income #>     <dbl> <fct> <fct>        <int> <chr>      <dbl> #>  1      1 m     56 - 65         63 Australia  29930 #>  2      2 m     26 - 35         33 Germany    17885 #>  3      3 m     66 - 100        74 Germany    20805 #>  4      4 w     18 - 25         21 Poland     29565 #>  5      5 m     0 - 17           9 Germany    15330 #>  6      6 m     0 - 17           6 Australia  23360 #>  7      7 m     66 - 100        84 Australia  19345 #>  8      8 w     66 - 100       100 Poland     35040 #>  9      9 m     36 - 45         38 USA        64605 #> 10     10 m     0 - 17          14 Australia  49275 #> # ℹ 22 more rows  # Create global alter table as_alters_df(egor32) #> # A tibble: 384 × 7 #>    .altID .egoID sex   age      age.years country   income #>     <int>  <dbl> <fct> <fct>        <int> <chr>      <dbl> #>  1      1      1 m     46 - 55         48 USA        45625 #>  2      2      1 m     0 - 17           5 Germany    52925 #>  3      3      1 w     26 - 35         35 Australia  60225 #>  4      4      1 w     0 - 17           3 Poland     25550 #>  5      5      1 m     66 - 100        97 Australia  45260 #>  6      6      1 w     26 - 35         29 Germany     8395 #>  7      7      1 m     26 - 35         32 USA        54020 #>  8      8      1 w     46 - 55         49 USA        60955 #>  9      9      1 m     56 - 65         60 Germany    39055 #> 10     10      1 w     46 - 55         52 Australia   7300 #> # ℹ 374 more rows  # Create global alter-alter relations table as_aaties_df(egor32) #> # A tibble: 1,056 × 4 #>    .egoID .srcID .tgtID weight #>     <int>  <int>  <int>  <dbl> #>  1     20      1      2  0.667 #>  2     25      6     10  0.667 #>  3      9      6      8  0.667 #>  4     31      2     10  0.667 #>  5     24      1     12  0.333 #>  6     11      9     11  0.333 #>  7      7      3      6  0.667 #>  8      8      6      7  0.667 #>  9     32      3      7  0.667 #> 10     26      2     10  1     #> # ℹ 1,046 more rows  # ... adding alter variables as_aaties_df(egor32, include.alter.vars = TRUE) #> # A tibble: 1,056 × 14 #>    .egoID .srcID .tgtID weight sex_src age_src  age.years_src country_src #>     <dbl>  <int>  <int>  <dbl> <fct>   <fct>            <int> <chr>       #>  1     20      1      2  0.667 m       66 - 100            97 Australia   #>  2     25      6     10  0.667 w       26 - 35             29 Germany     #>  3      9      6      8  0.667 w       26 - 35             29 Germany     #>  4     31      2     10  0.667 w       46 - 55             52 Australia   #>  5     24      1     12  0.333 m       18 - 25             22 USA         #>  6     11      9     11  0.333 m       46 - 55             48 USA         #>  7      7      3      6  0.667 w       46 - 55             54 Poland      #>  8      8      6      7  0.667 w       66 - 100            83 Germany     #>  9     32      3      7  0.667 w       46 - 55             55 Germany     #> 10     26      2     10  1     w       66 - 100            89 Poland      #> # ℹ 1,046 more rows #> # ℹ 6 more variables: income_src <dbl>, sex_tgt <fct>, age_tgt <fct>, #> #   age.years_tgt <int>, country_tgt <chr>, income_tgt <dbl> as_egos_survey(egor32) #> Independent Sampling design (with replacement) #> Called via srvyr #> Data variables:  #>   - .egoID (dbl), sex (fct), age (fct), age.years (int), country (chr), income #>     (dbl) as_alters_survey(egor32) # Notice the resulting cluster design. #> 1 - level Cluster Sampling design (with replacement) #> With (32) clusters. #> Called via srvyr #> Data variables:  #>   - .altID (int), .egoID (dbl), sex (fct), age (fct), age.years (int), country #>     (chr), income (dbl)"},{"path":"/reference/clustered_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster ego-centered networks by a grouping factor — clustered_graphs","title":"Cluster ego-centered networks by a grouping factor — clustered_graphs","text":"idea clustered graphs reduce complexity ego-centered network graph visualizing alters clusters defined categorical variable (Lerner et al. 2008). clustered_graphs() calculates group sizes, inter intra group tie densities returns informations list igraph objects.","code":""},{"path":"/reference/clustered_graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster ego-centered networks by a grouping factor — clustered_graphs","text":"","code":"clustered_graphs(object, ..., clust.groups)  # S3 method for class 'list' clustered_graphs(object, aaties, clust.groups, ...)  # S3 method for class 'egor' clustered_graphs(object, clust.groups, ...)  # S3 method for class 'data.frame' clustered_graphs(object, aaties, clust.groups, egoID = \".egoID\", ...)"},{"path":"/reference/clustered_graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster ego-centered networks by a grouping factor — clustered_graphs","text":"object egor object. ... arguments passed methods clust.groups character naming factor variable defining groups. aaties data.frame/ list containing alter-alter relations 'global edge list' list 'edge lists'. (needed object egor object). egoID Character. Name variable identifying egos (default: \"egoID\").","code":""},{"path":"/reference/clustered_graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster ego-centered networks by a grouping factor — clustered_graphs","text":"clustered_graphs returns list graph objects representing clustered ego-centered network data;","code":""},{"path":"/reference/clustered_graphs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cluster ego-centered networks by a grouping factor — clustered_graphs","text":"Brandes, U., Lerner, J., Lubbers, M. J., McCarty, C., & Molina, J. L. (2008). Visual Statistics Collections Clustered Graphs. 2008 IEEE Pacific Visualization Symposium, 47-54.","code":""},{"path":[]},{"path":"/reference/clustered_graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster ego-centered networks by a grouping factor — clustered_graphs","text":"","code":"data(\"egor32\")  # Simplify networks to clustered graphs, stored as igraph objects graphs <- clustered_graphs(egor32, \"country\")   # Visualise par(mfrow = c(2,3)) vis_clustered_graphs(   graphs[1:5] )  par(mfrow = c(1,1))"},{"path":"/reference/col_idx.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain the index of a column in a data frame (or a list), producing an error if there is a problem. — col_idx","title":"Obtain the index of a column in a data frame (or a list), producing an error if there is a problem. — col_idx","text":"Obtain index column data frame (list), producing error problem.","code":""},{"path":"/reference/col_idx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain the index of a column in a data frame (or a list), producing an error if there is a problem. — col_idx","text":"","code":"col_idx(name, df)"},{"path":"/reference/col_idx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain the index of a column in a data frame (or a list), producing an error if there is a problem. — col_idx","text":"name character vector giving names columns look . df data.frame list object.","code":""},{"path":"/reference/col_idx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain the index of a column in a data frame (or a list), producing an error if there is a problem. — col_idx","text":"integer giving column index named column.","code":""},{"path":"/reference/col_idx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Obtain the index of a column in a data frame (or a list), producing an error if there is a problem. — col_idx","text":"Numeric inputs name passed , function safe use input already column index.","code":""},{"path":"/reference/common_prefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Longest common prefix of a set of strings. — common_prefix","title":"Longest common prefix of a set of strings. — common_prefix","text":"Longest common prefix set strings.","code":""},{"path":"/reference/common_prefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Longest common prefix of a set of strings. — common_prefix","text":"","code":"common_prefix(x)"},{"path":"/reference/common_prefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Longest common prefix of a set of strings. — common_prefix","text":"x character vector.","code":""},{"path":"/reference/common_prefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Longest common prefix of a set of strings. — common_prefix","text":"character vector longest common substring start input vectors.","code":""},{"path":"/reference/comp_ei.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the EI-Indices of an egor object as a measurement of ego-alter homophily — comp_ei","title":"Calculate the EI-Indices of an egor object as a measurement of ego-alter homophily — comp_ei","text":"comp_ei() calculates EI-Index values measurement ego-alter homo-/heterophily.","code":""},{"path":"/reference/comp_ei.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the EI-Indices of an egor object as a measurement of ego-alter homophily — comp_ei","text":"","code":"comp_ei(object, alt.attr, ego.attr)"},{"path":"/reference/comp_ei.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the EI-Indices of an egor object as a measurement of ego-alter homophily — comp_ei","text":"object egor object. alt.attr character naming variable containing alter-attribute. ego.attr character naming ego attribute.","code":""},{"path":"/reference/comp_ei.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the EI-Indices of an egor object as a measurement of ego-alter homophily — comp_ei","text":"tibble ego ID numeric result vector.","code":""},{"path":"/reference/comp_ei.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the EI-Indices of an egor object as a measurement of ego-alter homophily — comp_ei","text":"","code":"data(\"egor32\") comp_ei(egor32, \"age\", \"age\") #> # A tibble: 32 × 2 #>    .egoID    ei #>     <dbl> <dbl> #>  1      1 0.833 #>  2      2 1     #>  3      3 0.333 #>  4      4 0.833 #>  5      5 0.5   #>  6      6 0.667 #>  7      7 0.333 #>  8      8 0.333 #>  9      9 1     #> 10     10 0.333 #> # ℹ 22 more rows"},{"path":"/reference/comp_ply.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate custom compositional measures on an egor object — comp_ply","title":"Calculate custom compositional measures on an egor object — comp_ply","text":"comp_ply() applies function, uses alter attribute calculate compositional measurement, networks egor object returns numeric vector.","code":""},{"path":"/reference/comp_ply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate custom compositional measures on an egor object — comp_ply","text":"","code":"comp_ply(object, alt.attr, .f, ..., ego.attr = NULL, result.name = \"result\")"},{"path":"/reference/comp_ply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate custom compositional measures on an egor object — comp_ply","text":"object egor object. alt.attr character naming variable containing alter-attribute. .f function returns numeric. ... Optional arguments .f. ego.attr Optional  character naming ego attribute. result.name Optional character naming result column.","code":""},{"path":"/reference/comp_ply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate custom compositional measures on an egor object — comp_ply","text":"tibble ego ID numeric result vector.","code":""},{"path":"/reference/comp_ply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate custom compositional measures on an egor object — comp_ply","text":"ego attribute used .f called like : .f(alt.attr, ego.attr, ...). .f must return single numeric value.","code":""},{"path":"/reference/comp_ply.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate custom compositional measures on an egor object — comp_ply","text":"Michał Bojanowski, michal2992@gmail.com Till Krenz, egor@tillt.net","code":""},{"path":"/reference/comp_ply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate custom compositional measures on an egor object — comp_ply","text":"","code":"df <- make_egor(10, 32) comp_ply(df, \"age.years\", sd, na.rm = TRUE) #> # A tibble: 10 × 2 #>    .egoID result #>     <dbl>  <dbl> #>  1      1   33.8 #>  2      2   30.8 #>  3      3   30.8 #>  4      4   30.8 #>  5      5   31.7 #>  6      6   30.2 #>  7      7   30.3 #>  8      8   31.1 #>  9      9   30.6 #> 10     10   30.4"},{"path":"/reference/composition.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the composition of alter attributes in an egor object — composition","title":"Calculate the composition of alter attributes in an egor object — composition","text":"composition() calculates proportional absolute composition alters given attribute/variable.","code":""},{"path":"/reference/composition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the composition of alter attributes in an egor object — composition","text":"","code":"composition(object, alt.attr, absolute = FALSE)"},{"path":"/reference/composition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the composition of alter attributes in an egor object — composition","text":"object egor object. alt.attr character naming variable containing alter-attribute. absolute Logical indicating results absolute.","code":""},{"path":"/reference/composition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the composition of alter attributes in an egor object — composition","text":"tibble ego ID values per category alt.attr numeric columns.","code":""},{"path":"/reference/composition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the composition of alter attributes in an egor object — composition","text":"","code":"data(\"egor32\") composition(egor32, \"sex\") #> # A tibble: 32 × 3 #>    .egoID     m     w #>     <dbl> <dbl> <dbl> #>  1      1 0.417 0.583 #>  2      2 0.333 0.667 #>  3      3 0.667 0.333 #>  4      4 0.333 0.667 #>  5      5 0.5   0.5   #>  6      6 0.583 0.417 #>  7      7 0.333 0.667 #>  8      8 0.583 0.417 #>  9      9 0.417 0.583 #> 10     10 0.333 0.667 #> # ℹ 22 more rows"},{"path":"/reference/count_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Count attribute combinations of dyads in ego-centered networks — count_dyads","title":"Count attribute combinations of dyads in ego-centered networks — count_dyads","text":"count_dyads() counts attribute combinations alter-alter ties/ dyads ego-centered networks. results can returned wide long tibble/ data.frame.","code":""},{"path":"/reference/count_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count attribute combinations of dyads in ego-centered networks — count_dyads","text":"","code":"count_dyads(   object,   alter_var_name,   return_as = c(\"wide\", \"long\"),   prefix = NULL )"},{"path":"/reference/count_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count attribute combinations of dyads in ego-centered networks — count_dyads","text":"object egor object. alter_var_name Character, naming alter variable use attribute. return_as Character, either \"wide\" (default) \"long\". prefix Character, added front variables. used return_as \"wide\". NULL (default) prefix automatically generated.","code":""},{"path":"/reference/count_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count attribute combinations of dyads in ego-centered networks — count_dyads","text":"Wide long tibble/ data.frame.","code":""},{"path":"/reference/count_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count attribute combinations of dyads in ego-centered networks — count_dyads","text":"","code":"data(egor32) count_dyads(object = egor32,             alter_var_name = \"country\") #> # A tibble: 32 × 11 #>    .egoID dy_cou_Australia_Austr…¹ dy_cou_Australia_Ger…² dy_cou_Australia_Pol…³ #>     <dbl>                    <int>                  <int>                  <int> #>  1      1                        2                      6                      3 #>  2      2                        0                      2                      0 #>  3      3                        4                      6                      4 #>  4      4                        1                      1                      1 #>  5      5                        2                     11                      4 #>  6      6                        2                      1                      1 #>  7      7                        0                      5                      7 #>  8      8                        1                      7                      1 #>  9      9                        1                      6                      4 #> 10     10                        0                      3                      1 #> # ℹ 22 more rows #> # ℹ abbreviated names: ¹​dy_cou_Australia_Australia, ²​dy_cou_Australia_Germany, #> #   ³​dy_cou_Australia_Poland #> # ℹ 7 more variables: dy_cou_Australia_USA <int>, dy_cou_Germany_Germany <int>, #> #   dy_cou_Germany_Poland <int>, dy_cou_Germany_USA <int>, #> #   dy_cou_Poland_USA <int>, dy_cou_USA_USA <int>, dy_cou_Poland_Poland <int>  # Return result as long tibble. count_dyads(object = egor32,             alter_var_name = \"country\",             return_as = \"long\") #> # A tibble: 278 × 3 #>    .egoID dyads                   n #>     <dbl> <chr>               <int> #>  1      1 Australia_Australia     2 #>  2      1 Australia_Germany       6 #>  3      1 Australia_Poland        3 #>  4      1 Australia_USA           3 #>  5      1 Germany_Germany         3 #>  6      1 Germany_Poland          4 #>  7      1 Germany_USA             6 #>  8      1 Poland_USA              2 #>  9      1 USA_USA                 3 #> 10      2 Australia_Germany       2 #> # ℹ 268 more rows"},{"path":"/reference/edgelist_to_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms edge lists to alter-alter wide format data. — edgelist_to_wide","title":"Transforms edge lists to alter-alter wide format data. — edgelist_to_wide","text":"Transforms edge lists alter-alter wide format data.","code":""},{"path":"/reference/edgelist_to_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms edge lists to alter-alter wide format data. — edgelist_to_wide","text":"","code":"edgelist_to_wide(edges, src_tgt_id = c(\".SRCID\", \".TGTID\"), weight = \"weight\")"},{"path":"/reference/edgelist_to_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms edge lists to alter-alter wide format data. — edgelist_to_wide","text":"edges List data.frames containing edge lists.","code":""},{"path":"/reference/ego_constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Burt constraint for the egos of ego-centered networks — ego_constraint","title":"Calculate Burt constraint for the egos of ego-centered networks — ego_constraint","text":"calculates Burt's network constraint egos egor object. iterates network applies igraph::constraint. weight variable can specified.","code":""},{"path":"/reference/ego_constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Burt constraint for the egos of ego-centered networks — ego_constraint","text":"","code":"ego_constraint(object, weights = NULL, ego.alter.weights = weights)"},{"path":"/reference/ego_constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Burt constraint for the egos of ego-centered networks — ego_constraint","text":"object egor object. weights Character, naming alter-alter tie weight variable. ego.alter.weights Character, naming ego-alter weight tie weight variable. defaults value weights, specify name ego.alter.weights different weights.","code":""},{"path":"/reference/ego_constraint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Burt constraint for the egos of ego-centered networks — ego_constraint","text":"Numeric vector constraint value ego.","code":""},{"path":"/reference/ego_constraint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Burt constraint for the egos of ego-centered networks — ego_constraint","text":"calculation weighted network constraint works, alter-alter tie weights complemented alter level variable specifying weight ego-alter ties.","code":""},{"path":"/reference/ego_constraint.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Burt constraint for the egos of ego-centered networks — ego_constraint","text":"Burt, R. (2004). Structural holes good ideas. American Journal Sociology, (110), 349–399.","code":""},{"path":"/reference/ego_constraint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Burt constraint for the egos of ego-centered networks — ego_constraint","text":"","code":"data(egor32) ego_constraint(egor32) #> # A tibble: 32 × 2 #>    .egoID constraint #>     <dbl>      <dbl> #>  1      1      0.294 #>  2      2      0.287 #>  3      3      0.285 #>  4      4      0.277 #>  5      5      0.290 #>  6      6      0.287 #>  7      7      0.298 #>  8      8      0.287 #>  9      9      0.288 #> 10     10      0.290 #> # ℹ 22 more rows"},{"path":"/reference/ego_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the relationship density in ego-centered networks — ego_density","title":"Calculate the relationship density in ego-centered networks — ego_density","text":"function uses egor object calculates density ego-centered networks listed 'egor' object. density calculated ego removed. Instead egor object, alter alter-alter data can provided lists data.frames.","code":""},{"path":"/reference/ego_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the relationship density in ego-centered networks — ego_density","text":"","code":"ego_density(object, ...)  # S3 method for class 'egor' ego_density(object, weight = NULL, max.netsize = NULL, directed = FALSE, ...)"},{"path":"/reference/ego_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the relationship density in ego-centered networks — ego_density","text":"object egor object. ... arguments passed methods weight Character naming variable containing weight values relations. Weights range 0 1. max.netsize Optional parameter. Constant value used number alters whose relations collected limited. directed logical indicating alter-alter relation data/ edges directed un-directed.","code":""},{"path":"/reference/ego_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the relationship density in ego-centered networks — ego_density","text":"returns vector network density values.","code":""},{"path":"/reference/ego_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the relationship density in ego-centered networks — ego_density","text":"","code":"data(\"egor32\") ego_density(egor32) #> # A tibble: 32 × 2 #>    .egoID density #>     <dbl>   <dbl> #>  1      1   0.485 #>  2      2   0.5   #>  3      3   0.5   #>  4      4   0.409 #>  5      5   0.561 #>  6      6   0.455 #>  7      7   0.652 #>  8      8   0.485 #>  9      9   0.515 #> 10     10   0.515 #> # ℹ 22 more rows"},{"path":"/reference/ego_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and query the ego sampling design — ego_design","title":"Set and query the ego sampling design — ego_design","text":"Extract, set, remove, update survey design associated ego-centered dataset.","code":""},{"path":"/reference/ego_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and query the ego sampling design — ego_design","text":"","code":"ego_design(x, ...)  # S3 method for class 'egor' ego_design(x, ...)  # S3 method for class 'nested_egor' ego_design(x, ...)  ego_design(x, ...) <- value  # S3 method for class 'egor' ego_design(x, ...) <- value  # S3 method for class 'nested_egor' ego_design(x, ...) <- value  has_ego_design(x)  # S3 method for class 'egor' has_ego_design(x)  # S3 method for class 'nested_egor' has_ego_design(x)  strip_ego_design(x)"},{"path":"/reference/ego_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and query the ego sampling design — ego_design","text":"x egor object. ... arguments passed methods value list arguments srvyr::as_survey_design() specifying sampling design egos terms ego variables. Variable names can referenced strings, one-sided formulas, using dplyr::select() syntax. recommended use alist() rather list() construct argument, particularly using select() syntax. Pass NULL set design.","code":""},{"path":"/reference/ego_design.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set and query the ego sampling design — ego_design","text":"can useful adjusting re-initializing ego design information underlying ego attributes modified.","code":""},{"path":"/reference/ego_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and query the ego sampling design — ego_design","text":"","code":"data(egor32)  ego_design(egor32) #> Independent Sampling design (with replacement) #> Called via srvyr #> Data variables:  #>   - .egoID (dbl), sex (fct), age (fct), age.years (int), country (chr), income #>     (dbl)  ego_design(egor32) <- alist(strata = sex)  ego_design(egor32) #> Stratified Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>   - ids: `1`  #>   - strata: sex  #> Data variables:  #>   - .egoID (dbl), sex (fct), age (fct), age.years (int), country (chr), income #>     (dbl)"},{"path":"/reference/egor-package.html","id":null,"dir":"Reference","previous_headings":"","what":"R Package for importing and analyzing ego-centered-network data — egor-package","title":"R Package for importing and analyzing ego-centered-network data — egor-package","text":"Tools importing, analyzing visualizing ego-centered network data. Supports several data formats, including export formats 'EgoNet', 'EgoWeb 2.0' 'openeddi'. interactive (shiny) app intuitive visualization ego-centered networks provided. Also included procedures creating visualizing Clustered Graphs (Lerner 2008 doi:10.1109/PACIFICVIS.2008.4475458 ).","code":""},{"path":"/reference/egor-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R Package for importing and analyzing ego-centered-network data — egor-package","text":"analyzing ego-centered network data common either include exclude data ego. default egor excludes ego analytic visual functions offers include ego argument include.ego. order egor automatically detect ego-level variables correspond alter-variables, variables different levels need named exactly . Alternatively functions include.ego argument additional arguments allow specify name ego-level variable question. information see package webpage GitHub.","code":""},{"path":[]},{"path":"/reference/egor-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R Package for importing and analyzing ego-centered-network data — egor-package","text":"Maintainer: Till Krenz egor@tillt.net Authors: Pavel N. Krivitsky pavel@statnet.org Raffaele Vacca r.vacca@ufl.edu Michal Bojanowski michal2992@gmail.com (ORCID) Andreas Herz herzand@uni-hildesheim.de contributors: Markus Gamper m.gamper@uni-koeln.de [contributor] Christopher McCarty ufchris@ufl.edu [contributor]","code":""},{"path":"/reference/egor.html","id":null,"dir":"Reference","previous_headings":"","what":"egor - a data class for ego-centered network data. — as.egor","title":"egor - a data class for ego-centered network data. — as.egor","text":"function egor() used create egor object ego-centered network data. .egor() converts list igraph/network objects nested_egor objects egor object.","code":""},{"path":"/reference/egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"egor - a data class for ego-centered network data. — as.egor","text":"","code":"as.egor(x, ...)  # S3 method for class 'nested_egor' as.egor(   x,   ID.vars = list(ego = \".egoID\", alter = \".alterID\", source = \".Source\", target =     \".Target\"),   ... )  # S3 method for class 'list' as.egor(x, ego_name = NULL, ...)  egor(   alters,   egos = NULL,   aaties = NULL,   ID.vars = list(ego = \"egoID\", alter = \"alterID\", source = \"Source\", target = \"Target\"),   ego_design = NULL,   alter_design = list(max = Inf) )"},{"path":"/reference/egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"egor - a data class for ego-centered network data. — as.egor","text":"x list igraph/network objects representing ego networks. ... arguments passed methods ID.vars named list containing column names relevant input columns: ego unique identifier associated ego, defaulting \"egoID\"; effect alters.df aaties.df lists data frames. alter unique-within-ego identifier associated alter, defaulting \"alterID\"; optional aaties.df provided. source aaties.df provided, column given alter identifier origin relation. target aaties.df provided, column given alter identifier destination relation. ego_name character numeric length one length networks. igraph/network objects include egos node, set NULL (default). alters either data.frame containing alters (whose nominator identified column specified egoID list data frames columns, one ego, empty data frames NULLs corresponding egos nominees. egos data.frame containing egos. aaties data.frame containing alter-alter relations style edge list, list data frames similar alters.df. ego_design list arguments srvyr::as_survey_design() specifying sampling design egos terms ego variables. Variable names can referenced strings, one-sided formulas, using dplyr::select() syntax. recommended use alist() rather list() construct argument, particularly using select() syntax. Pass NULL set design. alter_design list arguments specifying nomination information. Currently, following elements supported:","code":""},{"path":"/reference/egor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"egor - a data class for ego-centered network data. — as.egor","text":"Returns egor object, named list three tibble data.frames: ego, alter aatie (alter-alter ties). data set .egoID column, groups data belonging one ego. Additionally alter data .alterID column, links columns .srcID .tgtID alter-alter tie data. addition, egor two attributes: ego_design, containing object returned srvyr::as_survey_design() specifying sampling design egos selected alter_design, list containing specification alters nominated. See argument currently implemented settings.","code":""},{"path":"/reference/egor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"egor - a data class for ego-centered network data. — as.egor","text":"parameters alters.df, egos.df, aaties.df data frames, need share common ego ID variable, corresponding values. alters.df aaties.df lists data frames, egoID ignored matched position rows egos.df. three parameters alters.df necessary create egor object, egos.df aaties.df optional.","code":""},{"path":"/reference/egor.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"egor - a data class for ego-centered network data. — as.egor","text":".egor(nested_egor): Can convert (legacy) nested_egor object egor object.","code":""},{"path":"/reference/egor.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"egor - a data class for ego-centered network data. — as.egor","text":"Column names .alts, .aaties, .egoRow reserved internal use egor used store persistent data. .-led column names may reserved future.","code":""},{"path":[]},{"path":"/reference/egor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"egor - a data class for ego-centered network data. — as.egor","text":"","code":"data(\"egos32\") data(\"alters32\") data(\"aaties32\")   e <- egor(alters32,           egos32,           aaties32,           ID.vars = list(ego = \".EGOID\",                          alter = \".ALTID\",                          source = \".SRCID\",                          target =  \".TGTID\"),           ego_design = alist(strata = sex))  e #> # EGO data with survey design (active): 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <chr> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      4 w     18 - 25         21 Poland     29565 #> 5      5 m     0 - 17           9 Germany    15330 #> # ℹ 27 more rows #> # ALTER data: 384 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     46 - 55        48 USA        45625 #> 2      2      1 m     0 - 17          5 Germany    52925 #> 3      3      1 w     26 - 35        35 Australia  60225 #> # ℹ 381 more rows #> # AATIE data: 1,056 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     20      1      2  0.667 #> 2     25      6     10  0.667 #> 3      9      6      8  0.667 #> # ℹ 1,053 more rows  ego_design(e) #> Stratified Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>   - ids: `1`  #>   - strata: sex  #> Data variables:  #>   - .egoID (dbl), sex (chr), age (fct), age.years (int), country (chr), income #>     (dbl)"},{"path":"/reference/egor32.html","id":null,"dir":"Reference","previous_headings":"","what":"32 randomly created ego-centered networks stored as an egor object — egor32","title":"32 randomly created ego-centered networks stored as an egor object — egor32","text":"32 randomly created ego-centered networks stored egor object","code":""},{"path":"/reference/egor32.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"32 randomly created ego-centered networks stored as an egor object — egor32","text":"","code":"egor32"},{"path":"/reference/egor32.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"32 randomly created ego-centered networks stored as an egor object — egor32","text":"egor object 32 ego-centered networks (5 variables): egoID ego identifier sex ego's gender age ego's age .alts nested column/list containing alters .aaties nested column/list containing alter-alter relations","code":""},{"path":"/reference/egor_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Display names and values of global egor options. — egor_options","title":"Display names and values of global egor options. — egor_options","text":"Display names values global egor options.","code":""},{"path":"/reference/egor_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display names and values of global egor options. — egor_options","text":"","code":"egor_options()"},{"path":"/reference/egor_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display names and values of global egor options. — egor_options","text":"Currently egor makes use following global options. Use options() change values.","code":""},{"path":"/reference/egor_options.html","id":"egor-print-rows-active-level","dir":"Reference","previous_headings":"","what":"egor.print.rows.active.level","title":"Display names and values of global egor options. — egor_options","text":"Numeric. Amount rows display printing active level egor object.","code":""},{"path":"/reference/egor_options.html","id":"egor-print-rows-inactive-level","dir":"Reference","previous_headings":"","what":"egor.print.rows.inactive.level","title":"Display names and values of global egor options. — egor_options","text":"Numeric. Amount rows display printing inactive levels egor object.","code":""},{"path":"/reference/egor_options.html","id":"egor-print-switch-active-level-to-top","dir":"Reference","previous_headings":"","what":"egor.print.switch.active.level.to.top","title":"Display names and values of global egor options. — egor_options","text":"Logical. printing egor object, active data-level always printed first?","code":""},{"path":"/reference/egor_options.html","id":"egor-return-results-with-design","dir":"Reference","previous_headings":"","what":"egor.return.results.with.design","title":"Display names and values of global egor options. — egor_options","text":"Logical. egor functions return ego-level results (e.g. one value per ego) return svy_tbl object containing ego_design(), set TRUE.","code":""},{"path":"/reference/egor_vis_app.html","id":null,"dir":"Reference","previous_headings":"","what":"egor Network Visualization App — egor_vis_app","title":"egor Network Visualization App — egor_vis_app","text":"Launches interactive Shiny Web App creates list igraph objects 'egor' object offers user several graphical means interacting visualization parameters networks egor object.","code":""},{"path":"/reference/egor_vis_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"egor Network Visualization App — egor_vis_app","text":"","code":"egor_vis_app(object = NULL, shiny_opts = list(launch.browser = TRUE))"},{"path":"/reference/egor_vis_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"egor Network Visualization App — egor_vis_app","text":"object egor object. shiny_opts list arguments passed shiny::shinyApp()'s options argument.","code":""},{"path":"/reference/egor_vis_app.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"egor Network Visualization App — egor_vis_app","text":"function requires shiny installed.","code":""},{"path":"/reference/egor_vis_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"egor Network Visualization App — egor_vis_app","text":"","code":"#if(interactive()){ #   data(\"egor32\") #   egor_vis_app(egor32) #}"},{"path":"/reference/egos32.html","id":null,"dir":"Reference","previous_headings":"","what":"32 randomly created egos belonging to ego-centered networks — egos32","title":"32 randomly created egos belonging to ego-centered networks — egos32","text":"32 randomly created egos belonging ego-centered networks","code":""},{"path":"/reference/egos32.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"32 randomly created egos belonging to ego-centered networks — egos32","text":"","code":"egos32"},{"path":"/reference/egos32.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"32 randomly created egos belonging to ego-centered networks — egos32","text":"data frame 32 sets alter-alter relations 4 variables: .EGOID ego identifier age age categories age.years age years country country income income sex gender","code":""},{"path":"/reference/extract_egos_and_return.html","id":null,"dir":"Reference","previous_headings":"","what":"This extracts egos from igraph/network data if they are named in ego_name and returns an egor object — extract_egos_and_return","title":"This extracts egos from igraph/network data if they are named in ego_name and returns an egor object — extract_egos_and_return","text":"extracts egos igraph/network data named ego_name returns egor object","code":""},{"path":"/reference/extract_egos_and_return.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This extracts egos from igraph/network data if they are named in ego_name and returns an egor object — extract_egos_and_return","text":"","code":"extract_egos_and_return(graph_attrs, alters, edges, ego_name = NULL)"},{"path":"/reference/extract_egos_and_return.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This extracts egos from igraph/network data if they are named in ego_name and returns an egor object — extract_egos_and_return","text":"graph_attrs List graph attributes alters alters edges edges ego_name ego_name","code":""},{"path":"/reference/gss2004.html","id":null,"dir":"Reference","previous_headings":"","what":"A selective subset of GSS 2004 data — gss2004","title":"A selective subset of GSS 2004 data — gss2004","text":"selective subset General Social Survey 2004 data containing variables network questions. See Details description particular subset selected. data near 0 research value, provided illustrate functions egor package.","code":""},{"path":"/reference/gss2004.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A selective subset of GSS 2004 data — gss2004","text":"","code":"gss2004"},{"path":"/reference/gss2004.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A selective subset of GSS 2004 data — gss2004","text":"tibble 499 rows variables listed . Data imported SPSS file labelled. Functions labelled package can used handle . Variables: id Case ID vpsu, vstrat, wtssall Design variables weight age Ego's age years race Ego's race. 1=white, 2=black, 3=sex Ego's sex. 1=male, 2=female marital Ego's marital status. 1=married, 2=widowed, 3=divorced, 4=separated, 5=never married numgiven Number alters mentioned age[1-5] Alter's age years race[1-5] Alter's race. 1=asian, 2=black, 3=hispanic, 4=white, 5=sex[1-5] Alter's sex. 1=male, 2=female spouse[1-5] Whether alter spouse ego. 1=mentioned, 2=mentioned close[1-4][2-5] close two alters according ego. 1=especially close, 2=know , 3=total strangers","code":""},{"path":"/reference/gss2004.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A selective subset of GSS 2004 data — gss2004","text":"General Social Survey data NORC: https://gss.norc.org/get--data.html","code":""},{"path":"/reference/gss2004.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A selective subset of GSS 2004 data — gss2004","text":"dataset created original GSS 2004 data illustrative purposes (1) small (2) contains just enough variation respondent's personal networks illustrate various functions package. essentially stratified sample original data (1472 cases). Strata correspond groups cases created unique combinations values following ego variables: age (3 categories), race, sex, marital, numgiven. 2 cases sampled stratum via simple random sampling replacement.","code":""},{"path":"/reference/helper.html","id":null,"dir":"Reference","previous_headings":"","what":"General helper functions — helper","title":"General helper functions — helper","text":"Helper functions ego centered network analysis","code":""},{"path":"/reference/helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General helper functions — helper","text":"","code":"as_nested_egor(x)  alters_by_ego(x)  # S3 method for class 'egor' alters_by_ego(x)  # S3 method for class 'nested_egor' alters_by_ego(x)  aaties_by_ego(x)  # S3 method for class 'egor' aaties_by_ego(x)  # S3 method for class 'nested_egor' aaties_by_ego(x)  dyad.poss(max.alters, directed = FALSE)  sanitize.wide.edges(max.alters)  create_edge_names_wide(x)  dyads_possible_between_groups(x, y, geometric = TRUE)  din_page_dist(x)"},{"path":"/reference/helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General helper functions — helper","text":"x Numeric. max.alters numeric giving maximum number alters. directed logical value indicating directedness alter-alter data. y Numeric. geometric Logical. Calculate possible dyads geometric mean?","code":""},{"path":"/reference/helper.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"General helper functions — helper","text":"as_nested_egor(): Converts egor object \"legacy\" egor object nested .alts .aaties columns. alters_by_ego(): Splits alter table list tables (possibly 0-row) alters associated ego, order ego table. aaties_by_ego(): Splits alter–alter ties table list tables (possibly 0-row) alter–alter associated ego, order ego table. dyad.poss(): Returns count possible edges un-directed directed, ego-centered network, based number alters. sanitize.wide.edges(): Generates data.frame marking possible dyads wide alter-alter relation data.frame. Row names corresponds network size. useful sanitizing alter-alter relations wide format. create_edge_names_wide(): Creates vector names variables containing data alter-alter relations/ dyads ego-centered networks. dyads_possible_between_groups(): Calculates possible edges members different groups ego-centered network. din_page_dist(): Calculates optimal distribution number equally sized objects DIN-Norm DIN 476 (.e. DIN A4) page landscape view.","code":""},{"path":"/reference/layout_egogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create layout for an egogram — layout_egogram","title":"Create layout for an egogram — layout_egogram","text":"creates pairs x y coordinates egogram, accompanied alter IDs coordinate pair.","code":""},{"path":"/reference/layout_egogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create layout for an egogram — layout_egogram","text":"","code":"layout_egogram(altID, venn_var, pie_var)"},{"path":"/reference/layout_egogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create layout for an egogram — layout_egogram","text":"altID Vector alter IDs. venn_var Vector values representing alter groups corresponding venns egogram. pie_var Vector values representing alter groups corresponding pieces pie egogram.","code":""},{"path":"/reference/layout_egogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create layout for an egogram — layout_egogram","text":"dataframe three columns: x, y altID.","code":""},{"path":"/reference/make_edge_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random edge list for one network. — make_edge_list","title":"Generate a random edge list for one network. — make_edge_list","text":"Generate random edge list one network.","code":""},{"path":"/reference/make_edge_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random edge list for one network. — make_edge_list","text":"","code":"make_edge_list(netsize)"},{"path":"/reference/make_edge_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a random edge list for one network. — make_edge_list","text":"netsize Numeric indicating maximum number alters.","code":""},{"path":"/reference/make_egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random ego-centered-network data. — make_egor","title":"Generate random ego-centered-network data. — make_egor","text":"function generates random ego-centered-network data specified number networks maximum network size. network size generated networks normal distribution sd=5.","code":""},{"path":"/reference/make_egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random ego-centered-network data. — make_egor","text":"","code":"make_egor(net.count, max.alters, netsize_fixed = FALSE, plot = FALSE)"},{"path":"/reference/make_egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random ego-centered-network data. — make_egor","text":"net.count Number networks/ egos generate. max.alters Maximum size networks. netsize_fixed Logical, TRUE  networks max.alters network size. plot whether plot network size distribution.","code":""},{"path":"/reference/onefile_to_egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Import ego-centered network data from 'one file format' — onefile_to_egor","title":"Import ego-centered network data from 'one file format' — onefile_to_egor","text":"function imports ego-centered network data, stored single file, providing ego, alter edge data. data format used Allbus 2010 (GESIS) similar social surveys.","code":""},{"path":"/reference/onefile_to_egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import ego-centered network data from 'one file format' — onefile_to_egor","text":"","code":"onefile_to_egor(   egos,   netsize = NULL,   ID.vars = list(ego = \"egoID\"),   attr.start.col,   attr.end.col,   max.alters,   aa.first.var,   aa.regex = NULL,   var.wise = FALSE,   ... )"},{"path":"/reference/onefile_to_egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import ego-centered network data from 'one file format' — onefile_to_egor","text":"egos Data frame containing ego data (egos cases) netsize Numeric, network size values used filter empty alter entries. alter data structured way, valid alters stored invalid alters, pass NULL filter invalid alters afterwards. ID.vars Character. onefile_to_egor name ego ID needs provided. attr.start.col Index name first column containing alter attributes. attr.end.col Index name last column containing alter attributes. max.alters Maximum number alters. aa.first.var First column containing alter-alter relations/ edges. aa.regex Perl regular expression name capture, intended run column names capturing via named capture following regex groups: \"attr\", \"src\", \"tgt\", representing edge attribute captured, source (first alter identified), target (second alter identified) edge, respectively. See regex information. var.wise Logical value indicating alter attributes sorted variable wise (defaults FALSE). ... additional arguments egor().","code":""},{"path":"/reference/onefile_to_egor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import ego-centered network data from 'one file format' — onefile_to_egor","text":"egor object returned. list three data frames: (1) ego: dataframe egos attributes; (2) alter: dataframe alters; (3) aatie: dataframe alter alter ties/ edges","code":""},{"path":"/reference/onefile_to_egor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import ego-centered network data from 'one file format' — onefile_to_egor","text":"Muller, C., Wellman, B., & Marin, . (1999). Use SPSS Study Ego-Centered Networks. Bulletin de Methodologie Sociologique, 64(1), 83-100.","code":""},{"path":"/reference/onefile_to_egor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import ego-centered network data from 'one file format' — onefile_to_egor","text":"","code":"path_to_one_file_8 <- system.file(\"extdata\", \"one_file_8.csv\", package = \"egor\") egos_8 <- read.csv2(path_to_one_file_8)  onefile_to_egor(   egos = egos_8, netsize = egos_8$netsize,   attr.start.col = \"alter.sex.1\",   attr.end.col = \"alter.age.8\",   aa.first.var = \"X1.to.2\",   max.alters = 8) #> Sorting data by egoID:  #> Done. #> Transforming alters data to long format:  #> Done. #> Transforming wide dyad data to edgelist:  #> Done. #> Note: Make sure to filter out alter-alter ties with invalid weight values. #> Filtering out empty alter entries using provided network size values:  #> Done. #> # EGO data (active): 16 × 5 #>   .egoID sex   age      netsize egoID.1 #> * <chr>  <chr> <chr>      <int>   <int> #> 1 1      w     66 - 100       8       1 #> 2 2      m     18 - 25        8       2 #> 3 3      w     26 - 35        8       3 #> 4 4      w     0 - 17         8       4 #> 5 5      m     36 - 45        8       5 #> # ℹ 11 more rows #> # ALTER data: 128 × 4 #>   .altID .egoID alter.sex. alter.age. #> * <chr>  <chr>  <chr>      <chr>      #> 1 1      1      w          66 - 100   #> 2 2      1      w          0 - 17     #> 3 3      1      m          56 - 65    #> # ℹ 125 more rows #> # AATIE data: 448 × 4 #>   .egoID .srcID .tgtID weight #> * <chr>  <chr>  <chr>   <int> #> 1 1      1      2           2 #> 2 1      1      3           3 #> 3 1      1      4           1 #> # ℹ 445 more rows"},{"path":"/reference/order.edge.list.columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Order edge list columns with source and target at the beginning. — order.edge.list.columns","title":"Order edge list columns with source and target at the beginning. — order.edge.list.columns","text":"Order edge list columns source target beginning.","code":""},{"path":"/reference/order.edge.list.columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order edge list columns with source and target at the beginning. — order.edge.list.columns","text":"","code":"order.edge.list.columns(edges, source_, target)"},{"path":"/reference/plot_egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting egor objects — plot_egograms","title":"Plotting egor objects — plot_egograms","text":"egor objects can plotted egographs egograms. default networks four first egos plotted.","code":""},{"path":"/reference/plot_egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting egor objects — plot_egograms","text":"","code":"plot_egograms(   x,   ego_no = 1,   x_dim = 1,   y_dim = 1,   venn_var = NULL,   pie_var = NULL,   ascending_inwards = TRUE,   vertex_size_var = NULL,   vertex_color_var = NULL,   vertex_color_palette = \"Heat Colors\",   vertex_color_legend_label = vertex_color_var,   vertex_label_var = \"name\",   edge_width_var = NULL,   edge_color_var = NULL,   edge_color_palette = \"Heat Colors\",   highlight_box_col_var = NULL,   highlight_box_col_palette = \"Heat Colors\",   res_disp_vars = NULL,   vertex_zoom = 1,   edge_zoom = 2,   font_size = 1,   pie_colors = NULL,   venn_gradient_reverse = FALSE,   show_venn_labels = TRUE,   include_ego = FALSE,   ... )  plot_ego_graphs(   x,   ego_no = 1,   x_dim = 1,   y_dim = 1,   vertex_size_var = NULL,   vertex_color_var = NULL,   vertex_color_palette = \"Heat Colors\",   vertex_color_legend_label = vertex_color_var,   vertex_label_var = \"name\",   edge_width_var = NULL,   ego_alter_edge_width_var = if (!is.null(edge_width_var) & include_ego) edge_width_var,   edge_color_var = NULL,   ego_alter_edge_color_var = if (!is.null(edge_color_var) & include_ego) edge_color_var,   edge_color_palette = \"Heat Colors\",   highlight_box_col_var = NULL,   highlight_box_col_palette = \"Heat Colors\",   res_disp_vars = NULL,   vertex_zoom = 1,   edge_zoom = 3,   font_size = 1,   include_ego = FALSE,   ego_attrs = NULL,   ... )  plot_egor(   x,   ego_no = 1,   x_dim = 2,   y_dim = 2,   ...,   type = c(\"egograph\", \"egogram\") )  # S3 method for class 'egor' plot(x, ...)"},{"path":"/reference/plot_egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting egor objects — plot_egograms","text":"x egor object. ego_no Ego row number. x_dim Number ego networks plot horizontally. y_dim Number ego networks plot vertically venn_var Name (character) alter column. pie_var Name (character) alter column. ascending_inwards Logical determining venn circle order. TRUE (default) values ascend outside inside, FALSE reverse. vertex_size_var Name (character) alter column. vertex_color_var Name (character) alter column. vertex_color_palette Name (character) color palette, see details available color palettes. vertex_color_legend_label Character. vertex_label_var Name (character) alter column. Set NULL suppress labels. edge_width_var Name (character) aatie column. edge_color_var Name (character) aatie column. edge_color_palette Name (character) color palette, see details available color palettes. highlight_box_col_var Name (character) ego column. highlight_box_col_palette Name (character) color palette, see details available color palettes. res_disp_vars Name (character) ego column. vertex_zoom Numeric. edge_zoom Numeric. font_size Numeric. pie_colors Character vector colors used coloring subsections circle. venn_gradient_reverse Logical, set TRUE order color intensity venns increase going inner circles outer circles. show_venn_labels Logical. include_ego Logical. ... Additional arguments forwarded plot.igraph. ego_alter_edge_width_var Name (character) alter column. ego_alter_edge_color_var Name (character) alter column. ego_attrs Character vector naming ego variables turn ego vertex attributes. Used combination include_ego = TRUE. type Character. Either \"egograph\" \"egogram\".","code":""},{"path":"/reference/plot_egor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting egor objects — plot_egograms","text":"type equals \"egograph\" ego networks plotted igraph's plotting engine. \"egogram\" uses special layout places nodes map (1) concentric circles (2) subsections, can mapped alter variables. Available color palettes : Heat Colors Yellow-Green Red-Yellow Blue-Red Black-White Greys Rainbow Topo Colors","code":""},{"path":"/reference/plot_egor.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plotting egor objects — plot_egograms","text":"plot_egograms(): Plots ego-socio-gram. plot_ego_graphs(): Plots ego graph.","code":""},{"path":"/reference/plot_egor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting egor objects — plot_egograms","text":"","code":"e <- make_egor(net.count = 5, max.alters = 12) plot_egograms(x = e,               ego_no = 2,               venn_var = \"sex\",               pie_var = \"country\",               vertex_size_var = \"age\")  plot(e)"},{"path":"/reference/read_egonet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ego-centered network data exported with EgoNet software as an egor object — read_egonet","title":"Read ego-centered network data exported with EgoNet software as an egor object — read_egonet","text":"function imports ego-centered network data folders separate files alters-level edge data. run basic checks upon completeness data inform user potential problems. function can used import data exported EgoNet (McCarty 2011).","code":""},{"path":"/reference/read_egonet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ego-centered network data exported with EgoNet software as an egor object — read_egonet","text":"","code":"read_egonet(   egos.file,   alter.folder,   edge.folder,   csv.sep = \",\",   ID.vars = list(ego = \"egoID\", alter = \"alterID\", source = \"Source\", target = \"Target\"),   first.col.row.names = FALSE,   ... )"},{"path":"/reference/read_egonet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ego-centered network data exported with EgoNet software as an egor object — read_egonet","text":"egos.file File name .csv file containing ego data. alter.folder Folder name folder containing alter data separate .csv files ego/ network. edge.folder Folder name folder containing edge/ tie data separate .csv files ego/ network. csv.sep Character indicating separator used csv files. ID.vars named list containing column names relevant input columns: ego unique identifier associated ego, defaulting \"egoID\"; effect alters.df aaties.df lists data frames. alter unique-within-ego identifier associated alter, defaulting \"alterID\"; optional aaties.df provided. source aaties.df provided, column given alter identifier origin relation. target aaties.df provided, column given alter identifier destination relation. first.col.row.names Boolean indicating first column contains row names, skipped, default FALSE. ... additional arguments egor().","code":""},{"path":"/reference/read_egonet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ego-centered network data exported with EgoNet software as an egor object — read_egonet","text":"egor object returned. list three data frames: (1) ego: dataframe egos attributes; (2) alter: dataframe alters; (3) aatie: dataframe alter alter ties/ edges","code":""},{"path":"/reference/read_egonet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read ego-centered network data exported with EgoNet software as an egor object — read_egonet","text":"","code":"egos.file <-  system.file(\"extdata\", \"egos_32.csv\", package = \"egor\") alters.folder <- system.file(\"extdata\", \"alters_32\", package = \"egor\") edge.folder <-  system.file(\"extdata\", \"edges_32\", package = \"egor\")  ef <- read_egonet(egos.file = egos.file,                            alter.folder = alters.folder,                            edge.folder = edge.folder,                            csv.sep = \";\") #> Reading ego data. #> Checking if alter.files and edge.files correspond #> Creating $alters.df and $alters.list #> Creating edge lists: $edges"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tidygraph activate","code":""},{"path":"/reference/return_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns results inheriting srvyr design if the input egor object has a an ego_design and global option ","title":"Returns results inheriting srvyr design if the input egor object has a an ego_design and global option ","text":"Returns results inheriting srvyr design input egor object ego_design global option \"egor.return.results..design\" TRUE 'NULL'.","code":""},{"path":"/reference/return_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns results inheriting srvyr design if the input egor object has a an ego_design and global option ","text":"","code":"return_results(x, results)"},{"path":"/reference/return_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns results inheriting srvyr design if the input egor object has a an ego_design and global option ","text":"x Original egor object, submitted call parent function. results data.frame .egoID column column hold ego-level results.","code":""},{"path":"/reference/rotate_to_equilibrium.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate circle or star graph layout so that it 'stands' on two bottom nodes. — rotate_to_equilibrium","title":"Rotate circle or star graph layout so that it 'stands' on two bottom nodes. — rotate_to_equilibrium","text":"Rotate circle star graph layout 'stands' two bottom nodes.","code":""},{"path":"/reference/rotate_to_equilibrium.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate circle or star graph layout so that it 'stands' on two bottom nodes. — rotate_to_equilibrium","text":"","code":"rotate_to_equilibrium(xy_mat)"},{"path":"/reference/rotate_to_equilibrium.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate circle or star graph layout so that it 'stands' on two bottom nodes. — rotate_to_equilibrium","text":"xy_mat two column matrix x y coordinates containing graph layout.","code":""},{"path":"/reference/rotate_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate a matrix of x and y coordinates by a radian — rotate_xy","title":"Rotate a matrix of x and y coordinates by a radian — rotate_xy","text":"Rotate matrix x y coordinates radian","code":""},{"path":"/reference/rotate_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate a matrix of x and y coordinates by a radian — rotate_xy","text":"","code":"rotate_xy(xy_mat, rad, direction = 1)"},{"path":"/reference/rotate_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate a matrix of x and y coordinates by a radian — rotate_xy","text":"xy_mat two column matrix x y coordinates. rad Numeric. Rotation angle radian. direction Numeric. Rotation direction, 1 clockwise -1 counter-clockwise.","code":""},{"path":"/reference/rowlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a table to a list of rows — rowlist","title":"Convert a table to a list of rows — rowlist","text":"convenience function converting data.frame() tibble::tibble().","code":""},{"path":"/reference/rowlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a table to a list of rows — rowlist","text":"","code":"rowlist(x)"},{"path":"/reference/rowlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a table to a list of rows — rowlist","text":"x data.frame(), tibble::tibble(), table data structure backed list() columns.","code":""},{"path":"/reference/rowlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a table to a list of rows — rowlist","text":"list() length nrow(x), element named list() containing elements corresponding row.","code":""},{"path":"/reference/rowlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a table to a list of rows — rowlist","text":"","code":"library(tibble) (df <- tibble(x=2:1, y=list(list(1:3), list(3:4)))) #> # A tibble: 2 × 2 #>       x y          #>   <int> <list>     #> 1     2 <list [1]> #> 2     1 <list [1]> rowlist(df) #> [[1]] #> [[1]]$x #> [1] 2 #>  #> [[1]]$y #> [[1]]$y[[1]] #> [1] 1 2 3 #>  #>  #>  #> [[2]] #> [[2]]$x #> [1] 1 #>  #> [[2]]$y #> [[2]]$y[[1]] #> [1] 3 4 #>  #>  #>"},{"path":"/reference/subset.egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter and Subset Ego-centered Datasets — subset.egor","title":"Filter and Subset Ego-centered Datasets — subset.egor","text":"Functions index take subsets egor() objects: manipulate egos, alters, alter-alter ties.","code":""},{"path":"/reference/subset.egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter and Subset Ego-centered Datasets — subset.egor","text":"","code":"# S3 method for class 'egor' subset(x, subset, ..., unit = attr(x, \"active\"))  # S3 method for class 'egor' x[i, j, unit = attr(x, \"active\"), ...]"},{"path":"/reference/subset.egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter and Subset Ego-centered Datasets — subset.egor","text":"x egor() object. subset either expression evaluated rows selected unit (eponymous argument subset()) function whose first argument row, specifying egos, alters, alter-alter ties keep. expressions can access variables calling environment; columns active unit, columns units active unit shares ego via ego$, alter$, aatie$ well following \"virtual\" columns simplify indexing: Ego index .egoRow contains index (counting 1) row evaluated. (can used access vector variables calling environment.) Alter index .altRow contains index (counting 1) row number alter table. Alter–alter indices .srcRow .tgtRow contain index (counting 1) row alter referenced .srcID .tgtID. (can used quickly access attributes alters question.) ... extra arguments subset subset function; otherwise unused. unit selector unit analysis affected: egos, alters (alter-alter) ties. Note one type unit can affected time. Defaults current active unit selected activate.egor(). numeric logical vector indexing appropriate unit. j either integer vector specifying columns filtered structure (ego, alters, ties) select, logical vector specifying columns keep. Note special columns .egoID, .altID, .srcID, .tgtID indexed j.","code":""},{"path":"/reference/subset.egor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter and Subset Ego-centered Datasets — subset.egor","text":"egor() object.","code":""},{"path":"/reference/subset.egor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter and Subset Ego-centered Datasets — subset.egor","text":"Removing duplicating ego also remove duplicate alters ties.","code":""},{"path":"/reference/subset.egor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter and Subset Ego-centered Datasets — subset.egor","text":"","code":"# Generate a small sample dataset (e <- make_egor(5,4)) #> # EGO data (active): 5 × 6 #>   .egoID sex   age      age.years country income #> *  <dbl> <chr> <fct>        <int> <chr>    <dbl> #> 1      1 m     46 - 55         52 USA      54750 #> 2      2 m     66 - 100        86 Germany  27010 #> 3      3 m     56 - 65         56 Poland   52925 #> 4      4 w     66 - 100        99 Germany  20075 #> 5      5 m     66 - 100        82 Poland   19710 #> # ALTER data: 15 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     36 - 45        36 USA        61320 #> 2      2      1 m     26 - 35        32 Australia  64240 #> 3      3      1 m     0 - 17          4 USA        45625 #> # ℹ 12 more rows #> # AATIE data: 8 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1      2      1      3  1     #> 2      3      1      2  0.333 #> 3      2      2      3  1     #> # ℹ 5 more rows  # First three egos in the dataset e[1:3,] #> # EGO data (active): 3 × 6 #>   .egoID sex   age      age.years country income #> *  <dbl> <chr> <fct>        <int> <chr>    <dbl> #> 1      1 m     46 - 55         52 USA      54750 #> 2      2 m     66 - 100        86 Germany  27010 #> 3      3 m     56 - 65         56 Poland   52925 #> # ALTER data: 9 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     36 - 45        36 USA        61320 #> 2      2      1 m     26 - 35        32 Australia  64240 #> 3      3      1 m     0 - 17          4 USA        45625 #> # ℹ 6 more rows #> # AATIE data: 5 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1      2      1      3  1     #> 2      3      1      2  0.333 #> 3      2      2      3  1     #> # ℹ 2 more rows  # Using an external vector # (though normally, we would use e[.keep,] here) .keep <- rep(c(TRUE, FALSE), length.out=nrow(e$ego)) subset(e, .keep) #> # EGO data (active): 3 × 6 #>   .egoID sex   age      age.years country income #> *  <dbl> <chr> <fct>        <int> <chr>    <dbl> #> 1      1 m     46 - 55         52 USA      54750 #> 2      3 m     56 - 65         56 Poland   52925 #> 3      5 m     66 - 100        82 Poland   19710 #> # ALTER data: 8 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <chr> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     36 - 45        36 USA        61320 #> 2      2      1 m     26 - 35        32 Australia  64240 #> 3      3      1 m     0 - 17          4 USA        45625 #> # ℹ 5 more rows #> # AATIE data: 4 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1      3      1      2  0.333 #> 2      5      1      2  0.667 #> 3      1      2      3  1     #> # ℹ 1 more row      # Filter egos subset(x = egor32, subset = egor32$ego$variables$sex == \"m\", unit=\"ego\") #> # EGO data with survey design (active): 18 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      5 m     0 - 17           9 Germany    15330 #> 5      6 m     0 - 17           6 Australia  23360 #> # ℹ 13 more rows #> # ALTER data: 216 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <fct> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     46 - 55        48 USA        45625 #> 2      2      1 m     0 - 17          5 Germany    52925 #> 3      3      1 w     26 - 35        35 Australia  60225 #> # ℹ 213 more rows #> # AATIE data: 603 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     20      1      2  0.667 #> 2      9      6      8  0.667 #> 3     31      2     10  0.667 #> # ℹ 600 more rows subset(x = egor32, sex == \"m\") #> # EGO data with survey design (active): 18 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      5 m     0 - 17           9 Germany    15330 #> 5      6 m     0 - 17           6 Australia  23360 #> # ℹ 13 more rows #> # ALTER data: 216 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <fct> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     46 - 55        48 USA        45625 #> 2      2      1 m     0 - 17          5 Germany    52925 #> 3      3      1 w     26 - 35        35 Australia  60225 #> # ℹ 213 more rows #> # AATIE data: 603 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     20      1      2  0.667 #> 2      9      6      8  0.667 #> 3     31      2     10  0.667 #> # ℹ 600 more rows  # Filter alters subset(x = egor32, sex == \"m\", unit = \"alter\") #> # EGO data with survey design (active): 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      4 w     18 - 25         21 Poland     29565 #> 5      5 m     0 - 17           9 Germany    15330 #> # ℹ 27 more rows #> # ALTER data: 180 × 7 #>   .altID .egoID sex   age      age.years country   income #> *  <int>  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1      1 m     46 - 55         48 USA        45625 #> 2      2      1 m     0 - 17           5 Germany    52925 #> 3      5      1 m     66 - 100        97 Australia  45260 #> # ℹ 177 more rows #> # AATIE data: 226 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     24      1     12  0.333 #> 2     16      1      5  0.667 #> 3     22      4      9  0.333 #> # ℹ 223 more rows  # Filter aaties subset(x = egor32, weight != 0, unit = \"aatie\") #> # EGO data with survey design (active): 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      4 w     18 - 25         21 Poland     29565 #> 5      5 m     0 - 17           9 Germany    15330 #> # ℹ 27 more rows #> # ALTER data: 384 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <fct> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     46 - 55        48 USA        45625 #> 2      2      1 m     0 - 17          5 Germany    52925 #> 3      3      1 w     26 - 35        35 Australia  60225 #> # ℹ 381 more rows #> # AATIE data: 1,056 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     20      1      2  0.667 #> 2     25      6     10  0.667 #> 3      9      6      8  0.667 #> # ℹ 1,053 more rows  # Filter egos by alter variables (keep only egos that have more than 13 alters) subset(x = egor32, nrow(alter) > 13, unit = \"ego\") #> # EGO data with survey design (active): 0 × 6 #> # ℹ 6 variables: .egoID <dbl>, sex <fct>, age <fct>, age.years <int>, #> #   country <chr>, income <dbl> #> # ALTER data: 0 × 7 #> # ℹ 7 variables: .altID <int>, .egoID <dbl>, sex <fct>, age <fct>, #> #   age.years <int>, country <chr>, income <dbl> #> # AATIE data: 0 × 4 #> # ℹ 4 variables: .egoID <int>, .srcID <int>, .tgtID <int>, weight <dbl>  # Filter alters by ego variables (keep only alters that have egos from Poland) subset(x = egor32, ego$country == \"Poland\", unit = \"alter\") #> # EGO data with survey design (active): 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      4 w     18 - 25         21 Poland     29565 #> 5      5 m     0 - 17           9 Germany    15330 #> # ℹ 27 more rows #> # ALTER data: 120 × 7 #>   .altID .egoID sex   age      age.years country   income #> *  <int>  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1      4 m     66 - 100        97 Australia  45260 #> 2      2      4 w     26 - 35         29 Germany     8395 #> 3      3      4 m     26 - 35         32 USA        54020 #> # ℹ 117 more rows #> # AATIE data: 318 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1      8      6      7  0.667 #> 2     32      3      7  0.667 #> 3     16      1      5  0.667 #> # ℹ 315 more rows  # Filter edges by alter variables (keep only edges between alters where `sex == \"m\"`) subset(x = egor32, all(alter$sex == \"m\"), unit = \"aatie\") #> # EGO data with survey design (active): 32 × 6 #>   .egoID sex   age      age.years country   income #> *  <dbl> <fct> <fct>        <int> <chr>      <dbl> #> 1      1 m     56 - 65         63 Australia  29930 #> 2      2 m     26 - 35         33 Germany    17885 #> 3      3 m     66 - 100        74 Germany    20805 #> 4      4 w     18 - 25         21 Poland     29565 #> 5      5 m     0 - 17           9 Germany    15330 #> # ℹ 27 more rows #> # ALTER data: 384 × 7 #>   .altID .egoID sex   age     age.years country   income #> *  <int>  <dbl> <fct> <fct>       <int> <chr>      <dbl> #> 1      1      1 m     46 - 55        48 USA        45625 #> 2      2      1 m     0 - 17          5 Germany    52925 #> 3      3      1 w     26 - 35        35 Australia  60225 #> # ℹ 381 more rows #> # AATIE data: 221 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <int>  <int>  <dbl> #> 1     24      1     12  0.333 #> 2     16      1      5  0.667 #> 3     22      4      9  0.333 #> # ℹ 218 more rows"},{"path":"/reference/summary.egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods to print and summarize egor objects — summary.egor","title":"Methods to print and summarize egor objects — summary.egor","text":"Methods print summarize egor objects","code":""},{"path":"/reference/summary.egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods to print and summarize egor objects — summary.egor","text":"","code":"# S3 method for class 'egor' summary(object, ...)  # S3 method for class 'egor' print(   x,   ...,   n.active = getOption(\"egor.rows_active_level\"),   n.inactive = getOption(\"egor.rows_inactive_level\") )"},{"path":"/reference/summary.egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods to print and summarize egor objects — summary.egor","text":"object, x egor object. ... additional arguments, either unused passed lower-level functions. n.active Numeric. Number rows print active data level. n.inactive Numeric. Number rows print inactive data levels. n Number rows print.","code":""},{"path":"/reference/threefiles_to_egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Read/ import ego-centered network data from the three files format, EgoWeb2.0 or openeddi. — threefiles_to_egor","title":"Read/ import ego-centered network data from the three files format, EgoWeb2.0 or openeddi. — threefiles_to_egor","text":"functions read ego-centered network data three files format, EgoWeb2.0 openeddi transform egoR object. three files format consists ego file, alters file one file containing edge data. EgoWeb2.0 openeddi use variations format.","code":""},{"path":"/reference/threefiles_to_egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read/ import ego-centered network data from the three files format, EgoWeb2.0 or openeddi. — threefiles_to_egor","text":"","code":"threefiles_to_egor(   egos,   alters.df,   edges,   ID.vars = list(ego = \"egoID\", alter = \"alterID\", source = \"Source\", target = \"Target\"),   ego.vars = NULL,   ... )  read_egoweb(   alter.file,   edges.file,   egos.file = NULL,   ID.vars = list(ego = \"EgoID\", alter = \"Alter.Number\", source = \"Alter.1.Number\", target     = \"Alter.2.Number\"),   ego.vars = NULL,   ... )  read_openeddi(   egos.file = NULL,   alters.file = NULL,   edges.file = NULL,   ID.vars = list(ego = \"puid\", alter = \"nameid\", source = \"nameid\", target = \"targetid\"),   ego.vars = NULL,   ... )"},{"path":"/reference/threefiles_to_egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read/ import ego-centered network data from the three files format, EgoWeb2.0 or openeddi. — threefiles_to_egor","text":"egos Data frame containing ego data (egos cases) alters.df Data frame containing alters data (alters rows), alters connected ego egoID. edges Dataframe. global edge list, first column ego ID variable. egos. ID.vars named list containing column names relevant input columns: ego unique identifier associated ego, defaulting \"egoID\"; effect alters.df aaties.df lists data frames. alter unique-within-ego identifier associated alter, defaulting \"alterID\"; optional aaties.df provided. source aaties.df provided, column given alter identifier origin relation. target aaties.df provided, column given alter identifier destination relation. ego.vars data.frame alter attributes wide format. ... additional arguments egor(). alter.file character specifiying filename alters data. edges.file character specifiying filename edge data. egos.file character specifiying filename ego data. alters.file Character name alters data file.","code":""},{"path":"/reference/threefiles_to_egor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read/ import ego-centered network data from the three files format, EgoWeb2.0 or openeddi. — threefiles_to_egor","text":"egor object returned. list three data frames: (1) ego: dataframe egos attributes; (2) alter: dataframe alters; (3) aatie: dataframe alter alter ties/ edges","code":""},{"path":"/reference/threefiles_to_egor.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Read/ import ego-centered network data from the three files format, EgoWeb2.0 or openeddi. — threefiles_to_egor","text":"read_egoweb(): function reads data EgoWeb 2.0 survey transforms egoR object. file name egos file provided ego data assumed merged alters data extracted read_egoweb. default standard ID variable names EgoWeb used, need specify ID variable names use ID.vars parameter. Information: github.com/qualintitative/egoweb read_openeddi(): function reads data created openeddi survey software transforms egoR object. parameters provided read_openeddi try find adequate files working directory. default standard ID variable names openeddi used, need specify ID variable names use ID.vars parameter. Information: www.openeddi.com","code":""},{"path":"/reference/threefiles_to_egor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read/ import ego-centered network data from the three files format, EgoWeb2.0 or openeddi. — threefiles_to_egor","text":"","code":"# The data for read.egonet.threefiles() needs to be loaded with read.csv(),  # for it to be converted to an egoR object. egos.file <-  system.file(\"extdata\", \"egos_32.csv\", package = \"egor\") alters.file <- system.file(\"extdata\", \"alters_32.csv\", package = \"egor\") edges.file <-  system.file(\"extdata\", \"edges_32.csv\", package = \"egor\")  egos <- read.csv2(egos.file) alters <- read.csv2(alters.file) edges <- read.csv2(edges.file)  tf <- threefiles_to_egor(egos = egos, alters.df = alters, edges = edges)  # read_egoweb() and read_openeddi() read the files directly from the disk. # \\donttest{ # Fetch current working directory wd <- getwd()  setwd(system.file(\"extdata\", \"openeddi\", package = \"egor\")) oe <- read_openeddi() #> No filenames specified, looking for ego, alters and edge files in working directory.  setwd(system.file(\"extdata\", \"egoweb\", package = \"egor\")) ew <- read_egoweb(alter.file = \"alters_32.csv\", edges.file = \"edges_32.csv\",                    egos.file = \"egos_32.csv\")                    # Restore working directory                    setwd(wd) # }"},{"path":"/reference/transnat.html","id":null,"dir":"Reference","previous_headings":"","what":"Transnational personal communities of social support of German migrants in Great Britain — transnat","title":"Transnational personal communities of social support of German migrants in Great Britain — transnat","text":"egor object derived subset data personal network study support relationships German migrants living UK maintain. data collected 2010 using respondent driven sampling (snowball sampling). number alters respondents allowed enter limited, random subsample eight alters selected alter name interpreter alter-alter tie questions. data set contains data 50 originally 234 egos.","code":""},{"path":"/reference/transnat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transnational personal communities of social support of German migrants in Great Britain — transnat","text":"","code":"transnat  alter_df  ego_df"},{"path":"/reference/transnat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transnational personal communities of social support of German migrants in Great Britain — transnat","text":"transnat: egor object 50 egos. alter_df: alter data.frame transnat dataset. ego_df: ego data.frame transnat dataset.","code":""},{"path":"/reference/transnat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transnational personal communities of social support of German migrants in Great Britain — transnat","text":"questionnaire used seven name generators: time time, people rely people's advice opinions help find way life better. last 12 months, sought advice came important decisions, example family work? (emotional) last 12 months done little jobs favors helped , example filling forms moving home? (instrumental) past year, turned felt wanted someone talk ? (emotional) last 12 months, borrowed money ? (instrumental) past year, spent free time shared hobby? ( social companionship) past year disagreements arguments (e.g. everyday affairs, money property)? (conflict) let know can rely (e.g. always need help)? (emotional).","code":""},{"path":"/reference/transnat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transnational personal communities of social support of German migrants in Great Britain — transnat","text":"Herz, . (2015). Relational constitution social support migrants' transnational personal communities. Social Networks, 40 (1), S. 64-74. Herz, . (2012). Strukturen transnationaler sozialer Unterstützung. Springer Fachmedien Wiesbaden.","code":""},{"path":"/reference/trim_aaties.html","id":null,"dir":"Reference","previous_headings":"","what":"Trims alter-alter ties of alters that are missing/ deleted from alters data. — trim_aaties","title":"Trims alter-alter ties of alters that are missing/ deleted from alters data. — trim_aaties","text":"used background dplyr methods, maintain alter-alter ties according changes made ego alter data levels.","code":""},{"path":"/reference/trim_aaties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trims alter-alter ties of alters that are missing/ deleted from alters data. — trim_aaties","text":"","code":"trim_aaties(object)"},{"path":"/reference/trim_aaties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trims alter-alter ties of alters that are missing/ deleted from alters data. — trim_aaties","text":"object egor object.","code":""},{"path":"/reference/trim_aaties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trims alter-alter ties of alters that are missing/ deleted from alters data. — trim_aaties","text":"egor object trimmed alter-alter ties (.aaties).","code":""},{"path":"/reference/trim_alters.html","id":null,"dir":"Reference","previous_headings":"","what":"Trims alters that are missing/ deleted from ego data. — trim_alters","title":"Trims alters that are missing/ deleted from ego data. — trim_alters","text":"used background dplyr methods, maintain alter ties according changes made ego data level.","code":""},{"path":"/reference/trim_alters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trims alters that are missing/ deleted from ego data. — trim_alters","text":"","code":"trim_alters(object)"},{"path":"/reference/trim_alters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trims alters that are missing/ deleted from ego data. — trim_alters","text":"object egor object.","code":""},{"path":"/reference/trim_alters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trims alters that are missing/ deleted from ego data. — trim_alters","text":"egor object trimmed alter-alter ties (.aaties).","code":""},{"path":"/reference/twofiles_to_egor.html","id":null,"dir":"Reference","previous_headings":"","what":"Import ego-centered network data from two file format — twofiles_to_egor","title":"Import ego-centered network data from two file format — twofiles_to_egor","text":"function imports ego-centered network data, stored two files, one file contains ego attributes edge information file contains alters data. form data storage ego-centered network data proposed Muller, Wellman Marin (1999).","code":""},{"path":"/reference/twofiles_to_egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import ego-centered network data from two file format — twofiles_to_egor","text":"","code":"twofiles_to_egor(   egos,   alters,   ID.vars = list(ego = \"egoID\", alter = \"alterID\", source = \"Source\", target = \"Target\"),   max.alters,   aa.first.var,   selection = NULL,   ... )"},{"path":"/reference/twofiles_to_egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import ego-centered network data from two file format — twofiles_to_egor","text":"egos Data frame containing ego data (egos cases) alters Data frame containing alters data (alters rows), alters connected ego egoID. ID.vars named list containing column names relevant input columns: ego unique identifier associated ego, defaulting \"egoID\"; effect alters.df aaties.df lists data frames. alter unique-within-ego identifier associated alter, defaulting \"alterID\"; optional aaties.df provided. source aaties.df provided, column given alter identifier origin relation. target aaties.df provided, column given alter identifier destination relation. max.alters Maximum number alters included edge data. aa.first.var Index name first column egos containing alter-alter data. selection Character naming numeric variable indicating alters selection zeros ones. ... additional arguments egor().","code":""},{"path":"/reference/twofiles_to_egor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import ego-centered network data from two file format — twofiles_to_egor","text":"egor object returned. list three data frames: (1) ego: dataframe egos attributes; (2) alter: dataframe alters; (3) aatie: dataframe alter alter ties/ edges","code":""},{"path":"/reference/twofiles_to_egor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import ego-centered network data from two file format — twofiles_to_egor","text":"","code":"path_to_alters_8.csv <- system.file(\"extdata\", \"alters_8.csv\", package = \"egor\") path_to_one_file_8 <- system.file(\"extdata\", \"one_file_8.csv\", package = \"egor\")  # read data from disk egos_8 <- read.csv2(path_to_one_file_8) alters_8 <- read.csv2(path_to_alters_8.csv)  # convert to egor object   twofiles_to_egor(     egos = egos_8,     alters = alters_8,     max.alters = 8,     aa.first.var = \"X1.to.2\") #> Sorting data by egoID and alterID. #> Transforming wide edge data to edgelist. #> # EGO data (active): 16 × 49 #>   .egoID sex   age      netsize egoID.1 alter.sex.1 alter.age.1 alter.sex.2 #> *  <int> <chr> <chr>      <int>   <int> <chr>       <chr>       <chr>       #> 1      1 w     66 - 100       8       1 w           66 - 100    w           #> 2      2 m     18 - 25        8       2 w           36 - 45     m           #> 3      3 w     26 - 35        8       3 w           56 - 65     m           #> 4      4 w     0 - 17         8       4 w           46 - 55     m           #> 5      5 m     36 - 45        8       5 w           18 - 25     w           #> # ℹ 11 more rows #> # ℹ 41 more variables: alter.age.2 <chr>, alter.sex.3 <chr>, alter.age.3 <chr>, #> #   alter.sex.4 <chr>, alter.age.4 <chr>, alter.sex.5 <chr>, alter.age.5 <chr>, #> #   alter.sex.6 <chr>, alter.age.6 <chr>, alter.sex.7 <chr>, alter.age.7 <chr>, #> #   alter.sex.8 <chr>, alter.age.8 <chr>, X1.to.2 <int>, X1.to.3 <int>, #> #   X1.to.4 <int>, X1.to.5 <int>, X1.to.6 <int>, X1.to.7 <int>, X1.to.8 <int>, #> #   X2.to.3 <int>, X2.to.4 <int>, X2.to.5 <int>, X2.to.6 <int>, … #> # ALTER data: 128 × 4 #>   .altID .egoID alter.sex alter.age #> *  <dbl>  <int> <chr>     <chr>     #> 1      1      1 w         18 - 25   #> 2      2      1 w         46 - 55   #> 3      3      1 m         0 - 17    #> # ℹ 125 more rows #> # AATIE data: 448 × 4 #>   .egoID .srcID .tgtID weight #> *  <int>  <dbl>  <dbl>  <int> #> 1      1      1      2      2 #> 2      1      1      3      3 #> 3      1      1      4      1 #> # ℹ 445 more rows"},{"path":"/reference/vis_clustered_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize clustered graphs — vis_clustered_graphs","title":"Visualize clustered graphs — vis_clustered_graphs","text":"vis_clustered_graphs visualizes clustered_graphs using list clustered graphs created clustered_graphs.","code":""},{"path":"/reference/vis_clustered_graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize clustered graphs — vis_clustered_graphs","text":"","code":"vis_clustered_graphs(   graphs,   node.size.multiplier = 1,   node.min.size = 0,   node.max.size = 200,   normalise.node.sizes = TRUE,   edge.width.multiplier = 1,   center = 1,   label.size = 0.8,   labels = FALSE,   legend.node.size = 45,   pdf.name = NULL,   ... )"},{"path":"/reference/vis_clustered_graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize clustered graphs — vis_clustered_graphs","text":"graphs List graph objects, representing clustered graphs. node.size.multiplier Numeric used multiply node diameter visualized nodes. node.min.size Numeric indicating minimum size plotted nodes node.max.size Numeric indicating maximum size plotted nodes normalise.node.sizes Logical. TRUE (default) node sizes plotted using per network proportions rather counts. edge.width.multiplier Numeric used multiply edge width. center Numeric indicating vertex plotted center. label.size Numeric. labels Boolean. Plots turned labels accompanied 'legend' plot giving labels vertices. legend.node.size Numeric used node diameter legend graph. pdf.name Character giving name/path pdf file create. ... Arguments pass plot.igraph.","code":""},{"path":"/reference/vis_clustered_graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize clustered graphs — vis_clustered_graphs","text":"vis_clustered_graphs plots list igraph objects created clustered_graphs function. clustered_graphs returns list graph objects representing clustered ego-centered network data;","code":""},{"path":"/reference/vis_clustered_graphs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Visualize clustered graphs — vis_clustered_graphs","text":"Brandes, U., Lerner, J., Lubbers, M. J., McCarty, C., & Molina, J. L. (2008). Visual Statistics Collections Clustered Graphs. 2008 IEEE Pacific Visualization Symposium, 47-54.","code":""},{"path":[]},{"path":"/reference/vis_clustered_graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize clustered graphs — vis_clustered_graphs","text":"","code":"data(\"egor32\")  # Simplify networks to clustered graphs, stored as igraph objects graphs <- clustered_graphs(egor32, \"country\")   # Visualise par(mfrow = c(2,3)) vis_clustered_graphs(   graphs[1:5] )  par(mfrow = c(1,1))"},{"path":"/reference/weights.egor.html","id":null,"dir":"Reference","previous_headings":"","what":"weights.egor() extracts the (relative) sampling weights of each ego in the dataset. — weights.egor","title":"weights.egor() extracts the (relative) sampling weights of each ego in the dataset. — weights.egor","text":"weights.egor() extracts (relative) sampling weights ego dataset.","code":""},{"path":"/reference/weights.egor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weights.egor() extracts the (relative) sampling weights of each ego in the dataset. — weights.egor","text":"","code":"# S3 method for class 'egor' weights(object, ...)"},{"path":"/reference/weights.egor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weights.egor() extracts the (relative) sampling weights of each ego in the dataset. — weights.egor","text":"object egor object. ... arguments passed methods","code":""},{"path":[]},{"path":"/reference/wide.dyads.to.edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform wide alter-alter data to an edge list. When alter-alter for numerous networks is stored in one file/object it is common use the 'wide' data format. This function transforms such data to an edge lists. — wide.dyads.to.edgelist","title":"Transform wide alter-alter data to an edge list. When alter-alter for numerous networks is stored in one file/object it is common use the 'wide' data format. This function transforms such data to an edge lists. — wide.dyads.to.edgelist","text":"Transform wide alter-alter data edge list. alter-alter numerous networks stored one file/object common use 'wide' data format. function transforms data edge lists.","code":""},{"path":"/reference/wide.dyads.to.edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform wide alter-alter data to an edge list. When alter-alter for numerous networks is stored in one file/object it is common use the 'wide' data format. This function transforms such data to an edge lists. — wide.dyads.to.edgelist","text":"","code":"wide.dyads.to.edgelist(   e.wide,   first.var,   max.alters,   alters.list = NULL,   selection = NULL )"},{"path":"/reference/wide.dyads.to.edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform wide alter-alter data to an edge list. When alter-alter for numerous networks is stored in one file/object it is common use the 'wide' data format. This function transforms such data to an edge lists. — wide.dyads.to.edgelist","text":"e.wide dataframe containing alter-alter relation data 'wide' format. first.var Number column containing relation first second network contact. max.alters Maximum number alters alter-alter relations collected.","code":""},{"path":"/reference/wide.dyads.to.edgelist.regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform wide alter-alter data to an edge list. A regex based implementation to convert a wide list to an edgelist. — wide.dyads.to.edgelist.regex","title":"Transform wide alter-alter data to an edge list. A regex based implementation to convert a wide list to an edgelist. — wide.dyads.to.edgelist.regex","text":"Transform wide alter-alter data edge list. regex based implementation convert wide list edgelist.","code":""},{"path":"/reference/wide.dyads.to.edgelist.regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform wide alter-alter data to an edge list. A regex based implementation to convert a wide list to an edgelist. — wide.dyads.to.edgelist.regex","text":"","code":"wide.dyads.to.edgelist.regex(e.wide, aa.regex, netsize)"},{"path":"/reference/wide.dyads.to.edgelist.regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform wide alter-alter data to an edge list. A regex based implementation to convert a wide list to an edgelist. — wide.dyads.to.edgelist.regex","text":"e.wide dataframe containing alter-alter relation data 'wide' format. aa.regex Perl regular expression name capture, intended run column names capturing via named capture following regex groups: \"attr\", \"src\", \"tgt\", representing edge attribute captured, source (first alter identified), target (second alter identified) edge, respectively. See regex information. netsize Vector containing values network size per ego.","code":""},{"path":"/reference/wide.to.long.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform 'wide' alter-level data to the 'long'-format — wide.to.long","title":"Transform 'wide' alter-level data to the 'long'-format — wide.to.long","text":"function transform wide-format dataframe ego-centered network data long-format data-frame, every row represents one alter/dyad. created dataframe numerous networks can distinguished network ID (egoID).","code":""},{"path":"/reference/wide.to.long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform 'wide' alter-level data to the 'long'-format — wide.to.long","text":"","code":"wide.to.long(   wide,   egoID = \"egoID\",   max.alters,   start.col,   end.col,   var.wise = FALSE )"},{"path":"/reference/wide.to.long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform 'wide' alter-level data to the 'long'-format — wide.to.long","text":"wide data.frame alter attributes wide format. egoID Character. Name variable identifying egos (default: \"egoID\"). max.alters numeric giving maximum number alters. start.col Index name first column containing alter-alter relation data. #!# : Defaults first column wide. end.col Index name first column containing alter-alter relation data. #!# : Defaults last column wide. var.wise logical value indicating whether alter attributes stored variable-wise, FALSE alter-wise storage assumed.","code":""},{"path":"/news/index.html","id":"egor-12510","dir":"Changelog","previous_headings":"","what":"egor 1.25.10","title":"egor 1.25.10","text":"CRAN release: 2025-10-31 fixed issues","code":""},{"path":"/news/index.html","id":"egor-12213","dir":"Changelog","previous_headings":"","what":"egor 1.22.13","title":"egor 1.22.13","text":"added method dplyr::distinct() (#63) added methods dplyr’s slice_head(), slice_tail(), slice_min(), slice_max(), slice_sample() (#84) fixed doc typos","code":""},{"path":"/news/index.html","id":"egor-12213-1","dir":"Changelog","previous_headings":"","what":"egor 1.22.13","title":"egor 1.22.13","text":"fixed igraph issue (#82)","code":""},{"path":"/news/index.html","id":"egor-12212","dir":"Changelog","previous_headings":"","what":"egor 1.22.12","title":"egor 1.22.12","text":"CRAN release: 2022-12-20 fixed printing issues (#80) fixed layout issues clustered_graphs() plot_egograms() fixed tidyselect deprecation warnings","code":""},{"path":"/news/index.html","id":"egor-1223","dir":"Changelog","previous_headings":"","what":"egor 1.22.3","title":"egor 1.22.3","text":"dropped AppVeyor CI house keeping","code":""},{"path":"/news/index.html","id":"egor-1221","dir":"Changelog","previous_headings":"","what":"egor 1.22.1","title":"egor 1.22.1","text":"CRAN release: 2022-01-14 bug fixes","code":""},{"path":"/news/index.html","id":"egor-1216","dir":"Changelog","previous_headings":"","what":"egor 1.21.6","title":"egor 1.21.6","text":"CRAN release: 2021-06-11 added vignette ego-centered network surveys Qualtrics .egor() now can convert list igraph network objects egor object improved plot_egograms() consistency as_network() handles alter-alter weights consistently include.ego = TRUE","code":""},{"path":"/news/index.html","id":"egor-02101","dir":"Changelog","previous_headings":"","what":"egor 0.21.01","title":"egor 0.21.01","text":"CRAN release: 2021-01-15 changed printing behavior egor objects EI() re-scaling can turned ego can included EI calculation improved plot_egograms() (.e. node size scaling) dplyr::rowwise() now supported new example data transnat gss2004 ego-alter weights now plotted correctly plot_egographs() several bugs fixed","code":""},{"path":"/news/index.html","id":"egor-02006","dir":"Changelog","previous_headings":"","what":"egor 0.20.06","title":"egor 0.20.06","text":"CRAN release: 2020-06-12 now using srvyr package allow survey designs reflected egor object adjustments work dplyr 1.0.0 feat: Added .egor.nested_egor() feat: added rowwise_egor()","code":""},{"path":"/news/index.html","id":"egor-02003","dir":"Changelog","previous_headings":"","what":"egor 0.20.03","title":"egor 0.20.03","text":"CRAN release: 2020-03-02 fix: updated clustered_graphs() work tibble 3.0.0","code":""},{"path":"/news/index.html","id":"egor-02001","dir":"Changelog","previous_headings":"","what":"egor 0.20.01","title":"egor 0.20.01","text":"CRAN release: 2020-01-27 feat: added count_dyads() function feat: plot_ego_gram now uses plot_ego_graph graph plotting feat: added ego_constraint fix: significantly sped trim_aaties; hence dplyr methods work much faster especially big datasets several fixes improvements plotting, importing infrastructure","code":""}]
